{
  "name": "My workflow 4",
  "nodes": [
    {
      "parameters": {
        "resource": "folder",
        "folderId": "01WL6XH3XY36G4D3TXBBHL7CQDHK63IVGB"
      },
      "type": "n8n-nodes-base.microsoftOneDrive",
      "typeVersion": 1,
      "position": [
        -2592,
        192
      ],
      "id": "a9973024-382e-4af1-85ad-2be4fe97bce9",
      "name": "Get items in a folder"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -2304,
        192
      ],
      "id": "29213345-7816-49e4-8abf-87eca3a94710",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        192,
        144
      ],
      "id": "4065d14f-f4ae-4df3-b6c0-e157fc23669f",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3189e99e-9ada-47ce-b37c-889d0790b67e",
              "name": "Near To",
              "value": "={{ $('RegEx On File Name').item.json.name }}",
              "type": "string"
            },
            {
              "id": "7425d952-479c-4bbe-936a-5b7a988198ca",
              "name": "fileID",
              "value": "={{ $('RegEx On File Name').item.json.fileID }}",
              "type": "string"
            },
            {
              "id": "21450d60-ec08-46a9-865c-71a20aa4ec21",
              "name": "extension",
              "value": "={{ $('RegEx On File Name').item.json.extension }}",
              "type": "string"
            },
            {
              "id": "ca6646a2-3a37-4314-b8e2-dfae5e8b285e",
              "name": "importName",
              "value": "={{ $('RegEx On File Name').item.json.importName }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -784,
        320
      ],
      "id": "94cd7b78-4e40-4ccc-a6a7-a8c712195d76",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "delete",
        "fileId": "={{ $('RegEx On File Name').item.json.fileID }}"
      },
      "type": "n8n-nodes-base.microsoftOneDrive",
      "typeVersion": 1,
      "position": [
        208,
        656
      ],
      "id": "78db0077-6412-44c2-a643-137700733b8f",
      "name": "Delete a file",
      "disabled": true
    },
    {
      "parameters": {
        "fileName": "=imported_{{ $('RegEx On File Name').item.json.name }}",
        "parentId": "01WL6XH3RJS7COLWYNOJF2LAE6HZXBOLQA",
        "binaryData": true
      },
      "type": "n8n-nodes-base.microsoftOneDrive",
      "typeVersion": 1,
      "position": [
        0,
        656
      ],
      "id": "93959344-55be-4a9a-aedc-5e3bdf44134e",
      "name": "Upload a file",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": "={{ $('Edit Fields').item.json.fileID }}"
      },
      "type": "n8n-nodes-base.microsoftOneDrive",
      "typeVersion": 1,
      "position": [
        -368,
        320
      ],
      "id": "04309c8d-da7a-4fb6-92bd-927fe807c270",
      "name": "Download a file"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "830fd459-585e-4b8e-bea5-109f48c422c8",
              "leftValue": "={{ $json.extension }}",
              "rightValue": "csv",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -80,
        240
      ],
      "id": "a6b8fe7f-6458-4985-bcb7-6481110aae09",
      "name": "If1"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        192,
        368
      ],
      "id": "c3869570-b84c-4dd6-9b24-c9b4d92a024c",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "resource": "search",
        "query": "=SELECT Id, Name, Ownerid, Transactions__c FROM Opportunity WHERE Name = '{{ $('RegEx On File Name').item.json.name }}'"
      },
      "type": "n8n-nodes-base.salesforce",
      "typeVersion": 1,
      "position": [
        -976,
        320
      ],
      "id": "2709f7e7-eb35-48af-ad0d-624b7fb2c186",
      "name": "Perform a query"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 21
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -2960,
        192
      ],
      "id": "e55b7327-377b-4e76-a0dc-80c98f8313fe",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "jsCode": "// N8N Code Node - Data Type Converter\n// This code transforms extracted data according to specified column types\n\nconst items = $input.all();\nconst Near_To_ID = $('Storing Parent Location').first().json.id\nconst convertedItems = items.map(item => {\n  const data = item.json;\n  \n  // Helper functions for type conversion\n  const convertToInteger = (value) => {\n    if (value === null || value === undefined || value === '') return null;\n    const num = parseInt(value, 10);\n    return isNaN(num) ? null : num;\n  };\n  \n  const convertToBoolean = (value) => {\n    if (value === null || value === undefined || value === '') return null;\n    if (typeof value === 'boolean') return value;\n    const str = String(value).toLowerCase().trim();\n    return ['true', '1', 'yes', 'y'].includes(str);\n  };\n  \n  const convertToText = (value) => {\n    if (value === null || value === undefined) return '';\n    return String(value).trim();\n  };\n  \n  const convertToTelephone = (value) => {\n    if (value === null || value === undefined || value === '') return null;\n    // Remove all non-digit characters\n    const cleaned = String(value).replace(/\\D/g, '');\n    // Return as integer if it's a valid phone number length\n    return cleaned.length >= 10 ? parseInt(cleaned, 10) : null;\n  };\n  \n  const convertToDate = (value) => {\n    if (value === null || value === undefined || value === '') return null;\n    // Try to parse as date, return as YYYY-MM-DD format if valid\n    const date = new Date(value);\n    return isNaN(date.getTime()) ? String(value) : date.toISOString().split('T')[0];\n  };\n  \n  // Apply conversions based on column specifications\n  const converted = {\n    // Text fields\n    'Near To ID':Near_To_ID,\n    'Entity Name': convertToText(data['Entity Name']),\n    'First Name': convertToText(data['First Name']),\n    'Last Name': convertToText(data['Last Name']),\n    'Buyer Type': convertToText(data['Buyer Type']),\n    'Address': convertToText(data['Address']),\n    'City': convertToText(data['City']),\n    'State': convertToText(data['State']),\n    'Status': convertToText(data['Status']),\n    'Registered Owner Name': convertToText(data['Registered Owner Name']),\n    'Registered Seller Name': convertToText(data['Registered Seller Name']),\n    'Beta: Possible Email': convertToText(data['Beta: Possible Email']),\n    'Buyer Mailing Address': convertToText(data['Buyer Mailing Address']),\n    'Buyer Mailing City': convertToText(data['Buyer Mailing City']),\n    'Buyer Mailing State': convertToText(data['Buyer Mailing State']),\n    'Buyer Mailing Zip': convertToText(data['Buyer Mailing Zip']),\n    \n    // Telephone/Integer fields\n    'Wireless 1': convertToTelephone(data['Wireless 1']),\n    'Wireless 2': convertToTelephone(data['Wireless 2']),\n    'Landline 1': convertToTelephone(data['Landline 1']),\n    \n    // Integer fields\n    'Zip': convertToInteger(data['Zip']),\n    'Bedrooms': convertToInteger(data['Bedrooms']),\n    'Bathrooms': convertToInteger(data['Bathrooms']),\n    'Sqft': convertToInteger(data['Sqft']),\n    'Smart Match': convertToInteger(data['Smart Match']),\n    'Most Recent Sale Price': convertToInteger(data['Most Recent Sale Price']),\n    'Prior Sale Price': convertToInteger(data['Prior Sale Price']),\n    'Buyer Transaction Count (On This Search)': convertToInteger(data['Buyer Transaction Count (On This Search)']),\n    \n    // String/Date fields (keep as string but validate date format)\n    'Most Recent Sale Date': convertToDate(data['Most Recent Sale Date']),\n    'Prior Sale Date': convertToDate(data['Prior Sale Date'])\n  };\n  \n  // Handle any additional fields that might exist in the data\n  Object.keys(data).forEach(key => {\n    if (!(key in converted)) {\n      converted[key] = data[key]; // Keep original value for unmapped fields\n    }\n  });\n  \n  return {\n    json: converted,\n    pairedItem: item.pairedItem\n  };\n});\n\nreturn convertedItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        816,
        240
      ],
      "id": "c4652ff3-8f4c-4450-94d2-d1b8c7e696db",
      "name": "Data Type Conversion"
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "=scraped_property",
        "fields": "Near To",
        "options": {}
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        -576,
        320
      ],
      "id": "44f2d81b-a49f-4016-b278-4cbbf0cc40dc",
      "name": "Storing Parent Location"
    },
    {
      "parameters": {
        "collection": "scraped_property",
        "options": {},
        "query": "={}"
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        -1616,
        336
      ],
      "id": "d66268f3-7170-4b51-a252-afdfead62461",
      "name": "MongoDB",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "1736049f-f76c-49e0-bd18-02e795c31ff1",
              "leftValue": "={{ $('RegEx On File Name').item.json.is_duplicate }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1184,
        336
      ],
      "id": "f6342b27-1f41-4557-9539-30debe119fd5",
      "name": "If2"
    },
    {
      "parameters": {
        "jsCode": "const currentItemNsme = $('Is File or Folder?').first().json.name\nconst currentItemID = $('Is File or Folder?').first().json.id\n\nconst nameParts = currentItemNsme.split('.');\nconst extension = nameParts.pop(); \nconst nameWithoutExtension = nameParts.join('.'); \nconst importName = `${nameWithoutExtension}_imported.${extension}`;\n\n\n\nconst olderRecords = $('MongoDB').all();\n\nconst escapedName = nameWithoutExtension.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\nconst regexPattern = new RegExp(escapedName, 'i');\n\nconst existingRecord = olderRecords.find(item => {\n  const propertyName = item.json['Near To']; \n  \n  return propertyName ? regexPattern.test(propertyName) : false;\n});\n\nif (existingRecord) {\n  return [{\n    is_duplicate: true,\n    reason: \"A property matching '${currentName}' already exists.\"\n  }]\n} else {\n  return [{\n    fileID:currentItemID,\n    name:nameWithoutExtension,\n    extension:extension,\n    importName:importName,\n    is_duplicate: false,\n  }]\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1392,
        336
      ],
      "id": "0d2572fc-9cc1-4a3d-b7bd-1315919bd882",
      "name": "RegEx On File Name"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "671a6be8-e516-4b72-b566-0affdea2a10f",
              "leftValue": "={{ $json[\"@microsoft.graph.downloadUrl\"] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2096,
        336
      ],
      "id": "ef7aa7c9-d518-48a1-ab24-a9b0f70db658",
      "name": "Is File or Folder?"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nconst salePrices = items.map(item => Number(item.json['Most Recent Sale Price'])).filter(price => !isNaN(price) && price !== null);\n\n// If there are fewer than two valid prices, quartiles cannot be calculated, so return the original items.\nif (salePrices.length < 2) {\n  return items;\n}\n\n// Sort the prices in ascending order to prepare for quartile calculation.\nsalePrices.sort((a, b) => a - b);\n\n\nconst getQuartile = (arr, q) => {\n  const pos = (arr.length - 1) * q;\n  const base = Math.floor(pos);\n  const rest = pos - base;\n  if (arr[base + 1] !== undefined) {\n    return arr[base] + rest * (arr[base + 1] - arr[base]);\n  } else {\n    return arr[base];\n  }\n};\n\nconst q1 = getQuartile(salePrices, 0.25);\nconst q3 = getQuartile(salePrices, 0.75);\n\n\nconst iqr = q3 - q1;\n\nconst lowerBound = q1 - 1.5 * iqr;\nconst upperBound = q3 + 1.5 * iqr;\n\n\nfor (const item of items) {\n  const currentPrice = item.json['Most Recent Sale Price'];\n\n  // If the price is above the upper bound (outlier) or below 10000, set it to null.\n  if (currentPrice > upperBound || currentPrice < lowerBound || currentPrice < 10000) {\n    item.json['Most Recent Sale Price'] = null;\n  }\n}\n\n// Return the modified items.\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        592,
        240
      ],
      "id": "55aecd56-701a-4b56-ba32-35e96a7d4010",
      "name": "Make Outliers to Null "
    }
  ],
  "connections": {
    "Get items in a folder": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Is File or Folder?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Make Outliers to Null ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Storing Parent Location",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload a file": {
      "main": [
        [
          {
            "node": "Delete a file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download a file": {
      "main": [
        [
          {
            "node": "Upload a file",
            "type": "main",
            "index": 0
          },
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Make Outliers to Null ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Perform a query": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get items in a folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Storing Parent Location": {
      "main": [
        [
          {
            "node": "Download a file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB": {
      "main": [
        [
          {
            "node": "RegEx On File Name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Perform a query",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RegEx On File Name": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is File or Folder?": {
      "main": [
        [
          {
            "node": "MongoDB",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Make Outliers to Null ": {
      "main": [
        [
          {
            "node": "Data Type Conversion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {},
  "triggerCount": 0,
  "meta": null
}