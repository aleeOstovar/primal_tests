{
  "name": "My workflow 3",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        -980,
        280
      ],
      "id": "178f4d26-6022-4695-9337-c3377aa576c9",
      "name": "Telegram Trigger",
      "webhookId": "ae275266-3971-4b84-b1db-6962a5b6b092",
      "credentials": {
        "telegramApi": {
          "id": "NnGUAtqWVZA68N46",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "19ec337d-50ba-4f9f-98fb-01ac5c3c67df",
                    "leftValue": "={{ $json.message.voice.file_id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        0,
        360
      ],
      "id": "0fd60f31-49c8-4263-929a-8a54e3aeae00",
      "name": "Switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "41e48c8c-9f85-4c67-bd5a-c47e37d9371f",
              "name": "text",
              "value": "={{ $json.message.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        380,
        260
      ],
      "id": "11a111ab-2dae-4f87-8f37-95001097967b",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        480,
        460
      ],
      "id": "e4a27e4b-1bae-4ecd-8a21-f60b5168a407",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "GGaHbQHCKVC9HTnx",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1440,
        400
      ],
      "id": "36a0fe7e-c4f4-4618-afb9-239bd456cbe0",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.message }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "id": "cb9ac26a-e814-420f-be37-2495ffa3707a"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "19ec337d-50ba-4f9f-98fb-01ac5c3c67df",
                    "leftValue": "={{ $binary.data }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        60,
        980
      ],
      "id": "9eb9d82f-2da6-46e4-b7e6-d25fa53220b5",
      "name": "Switch Input Type"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "41e48c8c-9f85-4c67-bd5a-c47e37d9371f",
              "name": "user_prompt",
              "value": "={{ $json.body.message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        480,
        880
      ],
      "id": "88989d61-b495-4367-b1ca-34d69ad16864",
      "name": "Set Prompt from Text"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        320,
        1080
      ],
      "id": "f0e95747-da8b-43dd-8886-52f345d4143c",
      "name": "Transcribe Audio",
      "credentials": {
        "openAiApi": {
          "id": "GGaHbQHCKVC9HTnx",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "2163f3ed-5a69-4bb5-95da-4c1d9943d2f7",
        "responseMode": "responseNode",
        "options": {
          "rawBody": false
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -180,
        980
      ],
      "id": "1cf706d1-ee2c-42b6-8b96-eedd84e73826",
      "name": "ChatUI Webhook",
      "webhookId": "2163f3ed-5a69-4bb5-95da-4c1d9943d2f7"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1640,
        960
      ],
      "id": "0e867564-85e3-4ed2-b29c-b35fd2125779",
      "name": "Respond with AI Message"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "da5d5bb6-79ba-449e-87fd-7b2434b9d0e2",
              "name": "user_prompt",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        480,
        1080
      ],
      "id": "abed6f52-62bf-4119-bdea-c5cbc574656b",
      "name": "Set Prompt from Audio"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.user_prompt }}",
        "options": {
          "systemMessage": "=You are Ava, an expert multi-language coding agent with advanced software engineering capabilities. You specialize in building full-stack and AI-integrated applications using Python, Node.js, CrewAI, LangChain, and Qdrant.\n\nYour primary goal is to understand the user's programming tasks and produce accurate, well-documented, and efficient code solutions. You also explain your design choices when necessary and follow current best practices in software architecture, testing, and LLM integration.\n\nðŸ”¹ Technical Capabilities: â€¢ Write, debug, and explain Python code for backend systems, API services, CLI tools, and machine learning workflows\nâ€¢ Build and orchestrate multi-agent systems using CrewAI\nâ€¢ Develop modular LangChain agents, tools, chains, and memory components\nâ€¢ Integrate and query vector databases like Qdrant using embeddings and similarity search\nâ€¢ Build secure and scalable applications using Node.js, Express, and NPM packages\n\nðŸ”¹ Style & Behavior Guidelines: â€¢ Always return clean, readable, production-ready code\nâ€¢ Add concise inline comments for clarity\nâ€¢ Use docstrings for class/method definitions where useful\nâ€¢ Respond in Markdown unless told otherwise\nâ€¢ Include installation commands or requirements if libraries are needed\nâ€¢ Warn about risky or unsafe operations (e.g., eval, open access tokens, shell injection)\n\nðŸ”¹ Coding Philosophy:\n\nInform before you code: If a request could be ambiguous, ask for clarification\nValidate user intent when security, persistence, or cost-sensitive operations are involved\nReuse modular functions when building complex pipelines or workflows\nPrioritize extensibility and clarity over cleverness\nðŸ”¹ Security & Safety: â€¢ Never access or suggest unsafe system calls (e.g., os.system, subprocess with user input) unless explicitly requested\nâ€¢ Always write sandboxed code for dynamic execution if needed (e.g., Code interpreter agents)\n\nAct as a helpful, proactive developer assistant. Clarify requirements if ambiguous. Optimize for reliability, modularity, and transparency in your code and explanations.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        860,
        960
      ],
      "id": "15f0eedd-8764-4104-b386-300f97378afb",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "numberInputs": 4,
        "rules": {
          "rule": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "346d3919-0477-40d1-8e59-408ee6322e07",
                    "leftValue": "",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.modelSelector",
      "typeVersion": 1,
      "position": [
        780,
        1860
      ],
      "id": "4d7ba479-55c4-4ef2-9cb4-80beb62f617f",
      "name": "Model Selector"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        1020,
        1600
      ],
      "id": "8f993fc9-f0be-4c36-92a4-6e6d97d94fed",
      "name": "DeepSeek Chat Model",
      "credentials": {
        "deepSeekApi": {
          "id": "RNRyg4wR0gGt5Uem",
          "name": "DeepSeek account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        820,
        1620
      ],
      "id": "92e59c1e-2bf0-4ebb-9ccf-be4e6778a68a",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "CvOnf8MEkYwRY6kg",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        640,
        1620
      ],
      "id": "fb825d58-1f2d-4480-8cfe-a7cac3f4b673",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "wskAOJwbjn98gsfU",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1120,
        1220
      ],
      "id": "21fc5a14-e3e3-4c29-93bd-6baa0ec24c9b",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "chatgpt-4o-latest"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        740,
        1220
      ],
      "id": "9e65ec80-4136-43e1-946c-c13d19019983",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "GGaHbQHCKVC9HTnx",
          "name": "OpenAi account"
        }
      }
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [
        []
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch Input Type": {
      "main": [
        [
          {
            "node": "Set Prompt from Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Transcribe Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe Audio": {
      "main": [
        [
          {
            "node": "Set Prompt from Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ChatUI Webhook": {
      "main": [
        [
          {
            "node": "Switch Input Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Prompt from Text": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Prompt from Audio": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Model Selector": {
      "ai_languageModel": [
        []
      ]
    },
    "DeepSeek Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Model Selector",
            "type": "ai_languageModel",
            "index": 3
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Model Selector",
            "type": "ai_languageModel",
            "index": 2
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Model Selector",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Respond with AI Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {},
  "triggerCount": 2,
  "meta": {
    "templateCredsSetupCompleted": true
  }
}