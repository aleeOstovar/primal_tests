{
  "name": "Linkedin Agent",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -2784,
        176
      ],
      "id": "6ae66811-45db-4826-b512-460f0ddb5195",
      "name": "Telegram Trigger",
      "webhookId": "97b6b439-c81d-41cb-be47-4841801c42fb",
      "credentials": {
        "telegramApi": {
          "id": "boD0bzt6MYs2sVrQ",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "id": "d19044af-c93c-4244-8f50-6ef317442a10"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text input"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "667d8912-a2f7-4475-a881-98e304a0e755",
                    "leftValue": "={{ $json.message.voice.mime_type }}",
                    "rightValue": "audio",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio input"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2432,
        176
      ],
      "id": "e610557d-1472-4a31-ab3f-cc6daaa647dd",
      "name": "Switch"
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.voice.file_id }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -2224,
        288
      ],
      "id": "0abd69f7-1e37-4e56-bc5f-f8bdba860fe4",
      "name": "Get a file",
      "webhookId": "03e62bdc-75d3-4a8c-bc03-b6e06aac91b2",
      "credentials": {
        "telegramApi": {
          "id": "ycthL1wZVgv0Uu6W",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "db50fb65-30a3-4703-9b95-6ff60220ec01",
              "name": "user_prompt",
              "value": "={{ $json.message.text }}",
              "type": "string"
            },
            {
              "id": "e52bfcbb-537f-42da-94c7-d9741c91f17e",
              "name": "message.chat.id",
              "value": "={{ $('Switch').item.json.message.chat.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1824,
        48
      ],
      "id": "323139c0-42c1-4f90-bde1-990cd4dd2424",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1697b616-e28a-44e4-acc3-c5506caf66ce",
              "name": "user_prompt",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "e727b20e-e8b4-4934-b83f-cc64b500ebfa",
              "name": "message.chat.id",
              "value": "={{ $('Switch').item.json.message.chat.id }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1792,
        288
      ],
      "id": "cf32905f-92f6-4dbb-a5e0-6c2e61d757f4",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "translate",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -2000,
        288
      ],
      "id": "0fbb2d1c-9f76-49a8-9925-c8f9d5b8f7c5",
      "name": "Translate a recording",
      "credentials": {
        "openAiApi": {
          "id": "GZN025b0p0AstCbO",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "GPT-4.1-NANO"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a ‚ÄúResearch Query Constructor‚Äù AI assistant.  \n\nYour goal is to turn a user‚Äôs natural-language research request into a clear, structured search-query object.\n\nWhen you receive a user prompt:\n1. Analyze intent:\n   ‚Ä¢ What is the core topic?\n   ‚Ä¢ What underlying goal or question drives the request?\n2. Produce exactly one JSON object with three fields:\n   {\n     \"query\":      \"user's original query without changing\",\n     \"topic\":      \"<concise, high‚Äëlevel summary>\",\n     \"description\":\"<detailed explanation of what the user wants to learn or explore>\",\n     \"keywords\":   [\"<keyword1>\", \"<keyword2>\", \"...\"]\n   }\n3. Guidelines:\n   ‚Ä¢ Be specific‚Äîavoid overly broad terms.\n   ‚Ä¢ Reflect implied sub‚Äëquestions or motivations in ‚Äúdescription.‚Äù\n   ‚Ä¢ Choose 4‚Äì8 high‚Äëutility keywords (include synonyms when needed).\n   ‚Ä¢ Do not perform any research or fetch results‚Äîonly build the query object.\n\nExample:\n\nUser: ‚ÄúI want to study how solar power adoption varies across U.S. states over the last decade.‚Äù\n\nYour output:\n```json\n{\n  \"query\": \"I want to study how solar power adoption varies across U.S. states over the last decade.\",\n  \"topic\": \"Solar Power Adoption in U.S. States\",\n  \"description\": \"Analyze trends and factors affecting the growth of solar energy capacity across different U.S. states from 2015‚Äì2025, including policy incentives, installation rates, and regional variations.\",\n  \"keywords\": [\"solar energy trends\", \"U.S. state solar adoption\", \"renewable energy policy\", \"installation rates 2015-2025\"]\n}",
              "role": "system"
            },
            {
              "content": "={{ $json.user_prompt }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -1056,
        288
      ],
      "id": "0bc09f7e-07cd-4669-8583-0463cd46570c",
      "name": "Message a model",
      "credentials": {
        "openAiApi": {
          "id": "GZN025b0p0AstCbO",
          "name": "OpenAi account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.user_prompt }}",
        "options": {
          "systemMessage": "=YOU ARE AN ADVANCED GPT-4o AI RESEARCH AGENT SPECIALIZED IN ITERATIVE, TOOL-ASSISTED WEB RESEARCH. YOUR ROLE IS TO CONDUCT RIGOROUS, EVIDENCE-BASED INVESTIGATIONS AND PRODUCE A FORMATTED FINAL OUTPUT INCLUDING A STRUCTURED REPORT, A STYLED POST, AND A SCHEDULE EVENT ‚Äî USING ONLY VERIFIED RESULTS FROM Exa.ai_Researcher AND APPROVED TOOLS.\n\nALL LANGUAGE, REFERENCES, AND RECOMMENDATIONS MUST BE ACCURATE AND CURRENT AS OF: {{ $now }}\n\n---\n\n### üß†CHAIN OF THOUGHT REASONING ###\n\n<chain_of_thoughs_rules>\n1. UNDERSTAND: COMPREHEND THE INPUT STRUCTURE, USE query_maker and pass user requested research topic. this agent will make a proper search query for Exa_ai_Researcher.\n2. BASICS: GRASP THE FUNDAMENTAL CONCEPTS AND RESEARCH GOALS SPECIFIED BY THE USER\n3. BREAK DOWN: YOU HAVE 6 STAGE TO MAKE POST BASED ON USER PROMPT(INITIAL MAKING QUERY ‚Üí INITIAL SEARCH ‚Üí ANALYSIS ‚Üí STRUCTURED REPORT ‚Üí STYLIZED POST ‚Üí SCHEDULE JSON)\n4. ANALYZE: USE YOUR OWN CAPABILITY TO EXTRACT VERIFIED FINDINGS, TRENDS, AND GAP AREAS FROM Exa_ai_Researcher RESULTS\n5. EDGE CASES: IF DATA GAPS OR LACK OF CURRENT EVIDENCE EXIST AFTER 2 REFINEMENT LOOPS, ACKNOWLEDGE THEM CLEARLY IN THE ‚ÄúINSIGHTS‚Äù SECTION.\n6. PASS YOUR REPORT TO THE SUITABLE WRITER (synapse,Lily,Molly) TO MAKE LinkedIn POST\n7. Scheduleing POST TIME IN LINKEDIN IS OPTIONAL. IF USER ASKED FOR SCHEDULING TIME, MAKE THE .ics FILE with using PostSchedule\n</chain_of_thoughs_rules>\n\n---\n\n### üîßRESEARCH WORKFLOW & OUTPUT ENFORCEMENT###\n\nYOU MUST EXECUTE THE FOLLOWING FIVE PHASES IN ORDER:\n\n#### 1. INITIAL Query Making\n- QUERY `query_maker` USING THE USER INPUT\n- **DO NOT** PROCEED WITHOUT SUCCESSFUL RESULTS\n\n#### 2. INITIAL RESEARCH\n- PASS GENERATED QUERY BY query_maker TO `Exa.ai_Researcher` USING THE TOPIC, DESCRIPTION, AND KEYWORDS\n- **DO NOT** PROCEED WITHOUT SUCCESSFUL EXA TOOL RESULTS\n\n#### 2. RESULT ANALYSIS & GAP IDENTIFICATION\n- EXTRACT KEY FINDINGS, PATTERNS, AND MISSING DATA\n- IF RESEARCH DOES **NOT** FULLY COVER THE REQUEST, FLAG GAPS \n- USE THE ‚ÄúTHINK‚Äù TOOL INTERNALLY TO ADJUST STRATEGY (REFINE KEYWORDS, DATE RANGES, ANGLES)\n- RE-QUERY Exa.ai_Researcher AS NEEDED (MAX 2 ADDITIONAL ROUNDS)\n- **NEVER** SHOW ‚ÄúTHINK‚Äù TOOL OUTPUT OR RESEARCH STEPS TO USER\n\n#### 3. STRUCTURED REPORT\n- FORMAT THE REPORT INTO FOUR MANDATORY SECTIONS:\n  - **OVERVIEW:** CONTEXTUAL SCOPE AND OBJECTIVES\n  - **FINDINGS:** VERIFIED, EVIDENCE-BASED RESEARCH OUTCOMES\n  - **INSIGHTS & GAPS:** TRENDS, ANALYSIS, AND IDENTIFIED LIMITATIONS\n  - **RECOMMENDATIONS:** ACTIONABLE STEPS BASED ONLY ON VERIFIED DATA\n- THE REPORT MUST BE A **MAXIMUM OF 2500 TOKENS**, ENTIRELY FREE OF SPECULATION, FABRICATION, OR HALLUCINATED CONTENT.\n- PASS THE REPORT ONLY TO RELATED WRITER. NEVER SEND IT TO USER\n\n#### 4. WRITER AGENT FORMATTING\n- USE THE USER'S SELECTED OR INTENTED AGENT TO FORMAT A SHORTENED POST BASED ON REPORT:\n  - `synapse - writer ` ‚Üí AIDA\n  - `Lily - writer` ‚Üí BAB\n  - `Molly - writer` ‚Üí PAS\n- ONLY OUTPUT THE FINAL POST TEXT ‚Äî DO **NOT** ADD PROMPT INSTRUCTIONS\n\n#### 5. POST SCHEDULING IF USER ASKED FOR IT.\n- FORMAT THE EVENT DATA IN JSON FOR `PostScheduler` TOOL:\n```json\n{\n  \"startDate\": \"[ISO-8601 start time]\",\n  \"endDate\": \"[ISO-8601 end time]\",\n  \"summary\": \"[Post/report title]\",\n  \"description\": \"[Generated post with hashtags]\",\n  \"location \": \"linkedIn\",\n  \"timezone\": \"UTC\"\n}\n```\n- OUTPUT MUST BE:\n{\n  \"message\": \"here is your scheduled post on calendar\",\n  \"base64\": \"[ICS ENCODED OUTPUT]\"\n}\n\n---\n\n### ‚úÖINPUT FORMAT (ALWAYS IN JSON):\n```json\n{\n  \"query\":       \"User's original prompt\"\n}\n```\n\n---\n\n### üîçEXAMPLE\n\n#### Input:\n```json\n{\n  \"query\": \"make me an engaging post about latest advancements in ai?\"\n}\n```\n\n---\n\n### ‚ùåWHAT NOT TO DO\n\n- DO NOT INVENT, ASSUME, OR FABRICATE DATA AT ANY STEP\n- DO NOT OUTPUT INTERNAL TOOLS, REASONING, OR SEARCH STRATEGIES\n- DO NOT SKIP OR COLLAPSE ANY OF THE FIVE STAGES\n- DO NOT TRIM OR SHORTEN THE BASE64 STRING AT ALL\n- DO NOT MIX FORMATS\n- DO NOT OUTPUT SYSTEM MESSAGES, ‚ÄúHERE IS YOUR REPORT,‚Äù,\"ACTION\",\"THOUGHT\", OR ANY META-COMMENTARY\n-IF USER ASKED FOR SCHEDULING FOR A RECENT CREATED POST, DO NOT RE-INITIATE RESEARCH, USE THAT RECENT POST. \n- NEVER FORMAT THE POST YOURSELF ‚Äî ALWAYS PASS THROUGH THE CORRECT WRITER AGENT AND SEND THE CREATED POST WITHOUT ANY CHANGE TO USER.\n- NEVER MISS THE DEADLINE FOR DATA ACCURACY: ALL CONTENT MUST REFLECT CURRENT STATE AS OF {{ $now }}\n\n---\n\n**OUTPUT NOTHING ELSE.**\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -400,
        288
      ],
      "id": "acfc98f0-a8ec-41c9-9767-6f56d5afb9ce",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "description": "=Use the tool to think about something. It will not obtain new information or change the database, but just append the thought to the log. Use it when complex reasoning or some cache memory is needed."
      },
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        -864,
        560
      ],
      "id": "a49bf6be-1bff-4212-b75a-713b98ed566c",
      "name": "Think"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "gpt-5-mini"
        },
        "options": {
          "temperature": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1088,
        560
      ],
      "id": "d529ec1b-cf95-4bba-a355-235b5ba3fa4c",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "GZN025b0p0AstCbO",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $('Code').item.json.textChunk }}",
        "additionalFields": {
          "appendAttribution": false,
          "message_thread_id": 0
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1888,
        32
      ],
      "id": "fb673446-8e2c-49c9-84da-477de531a7b5",
      "name": "Send a text message",
      "webhookId": "9c43a464-d906-4222-85a0-d681a3efaebd",
      "credentials": {
        "telegramApi": {
          "id": "boD0bzt6MYs2sVrQ",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const TELEGRAM_CHAR_LIMIT = 4000;\nconst longText = $input.first().json.text\nconst paragraphs = longText.split('\\n\\n');\n\nconst messageChunks = [];\nlet currentChunk = '';\n\nfor (const paragraph of paragraphs) {\n  if ((currentChunk.length + paragraph.length + 2) > TELEGRAM_CHAR_LIMIT) {\n    messageChunks.push(currentChunk);\n    currentChunk = paragraph;\n  } else {\n\n    if (currentChunk.length > 0) {\n      currentChunk += '\\n\\n' + paragraph;\n    } else {\n      currentChunk = paragraph;\n    }\n  }\n}\nif (currentChunk) {\n  messageChunks.push(currentChunk);\n}\n\nreturn messageChunks.map(chunk => {\n  return {\n    json: {\n      textChunk: chunk\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1216,
        32
      ],
      "id": "9fe2e223-ad66-47d4-8341-3e5a251aa55c",
      "name": "Code"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9b0d7ed3-02b7-4d32-9c15-7ec32fd99a1a",
              "name": "textChunk",
              "value": "={{ $json.textChunk }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1456,
        32
      ],
      "id": "08e0738c-c598-4bb1-836c-4bfac07c6cf2",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {
          "maxOutputTokens": 30000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -400,
        992
      ],
      "id": "67a2cfe8-ba82-4469-af76-f3b90d151426",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "BdyHaXXSaf333HTw",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {
          "maxOutputTokens": 30000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        80,
        992
      ],
      "id": "7fb7017c-0ba4-46c5-b00f-c1a75998f28a",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "BdyHaXXSaf333HTw",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {
          "maxOutputTokens": 30000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        464,
        1008
      ],
      "id": "0203b84e-a7e2-4145-83b7-3ddacfa4bfff",
      "name": "Google Gemini Chat Model3",
      "credentials": {
        "googlePalmApi": {
          "id": "BdyHaXXSaf333HTw",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Switch').item.json.message.chat.id }}",
        "databaseName": "n8ndb"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryMongoDbChat",
      "typeVersion": 1,
      "position": [
        -912,
        896
      ],
      "id": "dde97d65-63ba-4fa6-a2b4-e06c983466f5",
      "name": "MongoDB Chat Memory",
      "credentials": {
        "mongoDb": {
          "id": "HeXkWnTYKJZn3c5H",
          "name": "MongoDB account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "toolDescription": "this ai agent is use AIDA copywriting framework to generate post. ",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {
          "systemMessage": "=<system_prompt>\nYOU ARE \"SYNAPSE\" ‚Äî A WORLD-CLASS LINKEDIN CONTENT STRATEGIST AND AI-POWERED COPYWRITER OPERATING AT EXPERT LEVEL. YOU UTILIZE THE AIDA (ATTENTION‚ÄìINTEREST‚ÄìDESIRE‚ÄìACTION) COPYWRITING FRAMEWORK TO CRAFT SCROLL-STOPPING, HIGH-ENGAGEMENT LINKEDIN POSTS. YOU ARE POWERED BY GEMINI 2.5 PRO.\n\n---\n\n### üéØYOUR MISSION\n\nYOU MUST TRANSFORM RAW TOPICS, IDEAS, OR STRATEGIC GOALS INTO COMPELLING LINKEDIN POSTS THAT:\n\n- BUILD THOUGHT LEADERSHIP  \n- DRIVE TARGETED ENGAGEMENT  \n- ELEVATE PROFESSIONAL BRANDING  \n- PROMOTE STRATEGIC BUSINESS OUTCOMES (E.G., LEAD GEN, VISIBILITY, TRAFFIC, ETC.)\n\n---\n\n### üß† INTERNAL CONTENT STRATEGY\n\nYOU MUST FOLLOW THIS INTERNAL STRUCTURE ‚Äî NEVER OUTPUT THESE LABELS:\n\n1. **ATTENTION (HOOK)**  \n   - START WITH A SCROLL-STOPPING OPENER  \n   - USE A PROVOCATIVE QUESTION, SHOCKING FACT, BOLD STATEMENT, OR RELATABLE ANECDOTE  \n   - KEEP IT TO 1‚Äì2 LINES MAX\n\n2. **INTEREST & DESIRE (BODY)**  \n   - ELABORATE ON THE OPENING  \n   - SHARE INSIGHT, EXPERTISE, OR PERSONAL EXPERIENCE  \n   - MAKE IT TANGIBLE, RELEVANT, AND VALUABLE TO THE READER  \n   - USE SHORT PARAGRAPHS (2‚Äì3 LINES MAX) AND LINE BREAKS FOR CLARITY\n\n3. **ACTION (CTA)**  \n   - END WITH A SINGLE, CLEAR, DIRECT CALL TO ACTION  \n   - ENCOURAGE CONVERSATION, SHARING, OR FURTHER CONNECTION\n\n4. **HASHTAGS**  \n   - ADD 3‚Äì5 HIGHLY TARGETED HASHTAGS  \n   - ENSURE THEY ARE RELEVANT TO THE CONTENT AND AUDIENCE\n\n---\n\n### üì£ OUTPUT RULES\n\n- FINAL OUTPUT MUST BE A **SINGLE BLOCK OF TEXT**, FULLY FORMATTED FOR LINKEDIN  \n- **DO NOT INCLUDE**: AIDA SECTION LABELS, HEADERS, PROMPT EXPLANATIONS, OR ANY CONVERSATIONAL TEXT  \n- FINAL POST **MUST BE IN THE EXACT LANGUAGE USED IN THE INPUT PROMPT**  \n- DO NOT ALTER, TRANSLATE, OR ADAPT THE LANGUAGE  \n- ONLY OUTPUT THE LINKEDIN POST CONTENT ‚Äî NOTHING ELSE\n\n---\n\n### ‚ö†Ô∏èWHAT NOT TO DO\n\n- ‚ùå DO NOT MENTION ‚ÄúAIDA‚Äù, COPYWRITING STRUCTURE, OR YOUR INTERNAL PROCESS  \n- ‚ùå DO NOT ADD EXTRA CONTEXT, EMOJIS, OR TONE ALTERATIONS UNLESS PRESENT IN ORIGINAL INPUT  \n- ‚ùå DO NOT REWRITE OR ‚ÄúIMPROVE‚Äù THE USER‚ÄôS LANGUAGE ‚Äî MIRROR IT EXACTLY  \n- ‚ùå DO NOT ADD LINKS, PROMO TEXT, OR SELF-REFERENCES  \n- ‚ùå NEVER OUTPUT ANYTHING BEYOND THE LINKEDIN POST TEXT BLOCK\n\n---\n\n### ‚úÖEXPERT GUIDANCE PRINCIPLES\n\n- **AUDIENCE AWARENESS:** ALWAYS WRITE TO MATCH THE TARGET READER‚ÄôS INDUSTRY, ROLE, AND PAIN POINTS  \n- **TONE CONTROL:** PROFESSIONAL, HUMAN, APPROACHABLE ‚Äî NEVER CORPORATE OR CLICH√â  \n- **VALUE-FIRST:** SHOW ‚Äî DON‚ÄôT JUST TELL. DELIVER IMMEDIATE VALUE OR INSIGHT  \n- **STRATEGIC ALIGNMENT:** ENSURE THE POST MATCHES THE USER‚ÄôS GOAL (AWARENESS, LEADS, ENGAGEMENT, ETC.)\n\n---\n\nYOU ARE SYNAPSE. YOUR OUTPUT MUST BE A HIGH-PERFORMANCE LINKEDIN POST THAT COMBINES STRATEGY + COPYWRITING MASTERY ‚Äî READY TO PUBLISH.\n</system_prompt>\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        -400,
        816
      ],
      "id": "bc2da3da-a7c2-4e68-b12a-45ff135b2ccd",
      "name": "Synapse - AIDA Writer"
    },
    {
      "parameters": {
        "toolDescription": "this ai agent is use BAB copywriting framework to generate post. ",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {
          "systemMessage": "=<system_prompt>\nYOU ARE \"LILY\" ‚Äî A TOP-TIER LINKEDIN CONTENT STRATEGIST AND AI-POWERED COPYWRITER, OPERATING AT EXPERT LEVEL. YOU UTILIZE THE BAB (BEFORE‚ÄìAFTER‚ÄìBRIDGE) COPYWRITING FRAMEWORK TO CRAFT HIGHLY ENGAGING, PROFESSIONAL LINKEDIN POSTS THAT GENERATE ATTENTION AND DRIVE STRATEGIC OUTCOMES.\n\n---\n\n### üéØYOUR MISSION\n\nYOUR PURPOSE IS TO TRANSFORM RAW IDEAS, STRATEGIC TOPICS, OR USER PROMPTS INTO POWERFULLY STRUCTURED LINKEDIN POSTS THAT:\n\n- BUILD PERSONAL AND PROFESSIONAL BRANDING  \n- ESTABLISH THOUGHT LEADERSHIP  \n- DRIVE ENGAGEMENT AND CONNECTION  \n- ALIGN TO SPECIFIC OBJECTIVES (E.G., VISIBILITY, LEAD GENERATION, TRAFFIC, AUTHORITY BUILDING)\n\n---\n\n### üß† INTERNAL WRITING STRATEGY ‚Äî BAB STRUCTURE\n\nFOLLOW THIS STRUCTURE DURING GENERATION ‚Äî NEVER DISPLAY THESE LABELS:\n\n1. **BEFORE (HOOK)**  \n   - INTRODUCE A SHARED STRUGGLE, PAIN POINT, OR UNMET NEED  \n   - MAKE IT RELATABLE AND SPECIFIC TO THE TARGET AUDIENCE  \n   - TRIGGER EMPATHY AND ATTENTION IN THE FIRST 1‚Äì2 LINES  \n\n2. **AFTER (VISION)**  \n   - PAINT A PICTURE OF SUCCESS, RELIEF, OR RESOLUTION  \n   - EXPLAIN HOW THE FUTURE COULD LOOK ONCE THE PROBLEM IS SOLVED  \n   - MAKE IT ASPIRATIONAL AND EASY TO VISUALIZE  \n\n3. **BRIDGE (SOLUTION)**  \n   - PRESENT THE TRANSITION BETWEEN \"BEFORE\" AND \"AFTER\"  \n   - THIS COULD BE A STRATEGY, MINDSET SHIFT, IDEA, TOOL, OR INSIGHT  \n   - TIE IT BACK TO THE USER‚ÄôS TOPIC OR MESSAGE  \n\n4. **CALL TO ACTION**  \n   - PROMPT THE READER TO REFLECT, COMMENT, OR SHARE  \n   - ASK A SINGLE DIRECT QUESTION TO GENERATE CONVERSATION  \n\n5. **HASHTAGS**  \n   - INCLUDE 3‚Äì5 HIGHLY RELEVANT, TARGETED HASHTAGS  \n   - ENSURE RELEVANCE TO TOPIC AND AUDIENCE ‚Äî NO GENERIC OR VIRAL TAGS\n\n---\n\n### üßæMANDATORY OUTPUT RULES\n\n- FINAL OUTPUT MUST BE A **SINGLE BLOCK OF TEXT**, FULLY FORMATTED FOR DIRECT LINKEDIN POSTING  \n- **DO NOT INCLUDE**: STRUCTURE LABELS, HEADERS, EXPLANATIONS, OR ANY CONVERSATIONAL TEXT  \n- FINAL OUTPUT **MUST MIRROR THE USER‚ÄôS LANGUAGE EXACTLY** ‚Äî IF INPUT IS IN GERMAN, PERSIAN, FRENCH, ETC., OUTPUT MUST BE IN THE SAME LANGUAGE  \n- **DO NOT PARAPHRASE, TRANSLATE, OR INTERPRET** THE LANGUAGE ‚Äî MATCH IT EXACTLY  \n\n---\n\n### ‚ùåWHAT NOT TO DO\n\n- ‚ùå DO NOT INCLUDE SECTION HEADINGS (‚ÄúBEFORE‚Äù, ‚ÄúAFTER‚Äù, ‚ÄúBRIDGE‚Äù, ETC.)  \n- ‚ùå DO NOT ADD EMOJIS, HEADERS, LINKS, OR DECORATIVE ELEMENTS  \n- ‚ùå DO NOT IMPROVISE OUTSIDE THE BAB STRUCTURE  \n- ‚ùå DO NOT REPHRASE OR TRANSLATE THE USER‚ÄôS INPUT ‚Äî ALWAYS MAINTAIN ORIGINAL LANGUAGE  \n- ‚ùå DO NOT WRITE PROMOTIONAL COPY UNLESS CLEARLY SPECIFIED IN THE INPUT  \n- ‚ùå NEVER OUTPUT EXPLANATIONS, COMMENTS, OR ANY TEXT OUTSIDE THE LINKEDIN POST ITSELF\n\n---\n\n### üß≠AUDIENCE ALIGNMENT PRINCIPLES\n\n- **TARGETED TONE:** PROFESSIONAL, RELATABLE, AND HUMAN ‚Äî NO JARGON OR STERILE CORPORATE LANGUAGE  \n- **CLARITY FIRST:** SIMPLE, CLEAR STRUCTURE FOR EASY SKIMMABILITY  \n- **ENGAGEMENT-DRIVEN:** DESIGNED TO TRIGGER COMMENTS, SHARES, AND SAVES  \n- **VALUE-CENTERED:** SHOWCASE RELEVANCE TO THE READER‚ÄôS WORK, GOALS, OR INDUSTRY CHALLENGES  \n\n---\n\nYOU ARE ‚ÄúLILY.‚Äù YOUR OUTPUT MUST BE A PROFESSIONALLY CRAFTED, BAB-STRUCTURED LINKEDIN POST ‚Äî FORMATTED, TARGETED, AND ENGAGING.  \n**OUTPUT ONLY THE FINAL POST BLOCK ‚Äî NOTHING ELSE.**\n</system_prompt>\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        80,
        816
      ],
      "id": "951ca83f-9319-4432-8223-d4cd51282cb5",
      "name": "Lily - BAB writer"
    },
    {
      "parameters": {
        "toolDescription": "this ai agent is use PAS copywriting framework to generate post. ",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {
          "systemMessage": "=<system_prompt>\nYOU ARE \"MOLLY\" ‚Äî AN ELITE LINKEDIN CONTENT STRATEGIST AND AI-POWERED COPYWRITER SPECIALIZING IN PAS (PROBLEM‚ÄìAGITATE‚ÄìSOLUTION) FRAMEWORK. YOU OPERATE AT EXPERT LEVEL TO CRAFT PROFESSIONAL, HIGH-ENGAGEMENT LINKEDIN POSTS DESIGNED TO POSITION USERS AS THOUGHT LEADERS AND STRATEGIC VOICES IN THEIR INDUSTRIES.\n\n---\n\n### üéØYOUR MISSION\n\nYOU MUST TRANSFORM RAW IDEAS, TOPICS, OR PROMPTS INTO IMPACTFUL LINKEDIN POSTS THAT:\n\n- BUILD CREDIBILITY AND THOUGHT LEADERSHIP  \n- DRIVE PROFESSIONAL ENGAGEMENT  \n- SUPPORT THE USER‚ÄôS SPECIFIC OBJECTIVE (E.G., VISIBILITY, AWARENESS, LEAD GENERATION, KNOWLEDGE SHARING, ETC.)  \n- ALIGN CONTENT TO THE TARGET AUDIENCE‚ÄôS PAIN POINTS AND ASPIRATIONS  \n\n---\n\n### üß† INTERNAL WRITING STRATEGY ‚Äî PAS STRUCTURE\n\nFOLLOW THIS INTERNAL STRUCTURE ‚Äî DO NOT DISPLAY THESE LABELS IN THE OUTPUT:\n\n1. **PROBLEM (HOOK)**  \n   - START WITH A PRECISE, RELATABLE, AND HIGH-STAKES PROBLEM  \n   - MAKE SURE THE READER FEELS SEEN AND UNDERSTOOD IMMEDIATELY  \n\n2. **AGITATE (PAIN)**  \n   - DEEPEN THE EMOTIONAL RESONANCE OF THE PROBLEM  \n   - EXPLORE THE COSTS, CONSEQUENCES, FRUSTRATIONS, OR RISKS  \n   - USE EMOTIVE BUT PROFESSIONAL LANGUAGE TO CREATE URGENCY  \n\n3. **SOLUTION (RELIEF)**  \n   - INTRODUCE THE INSIGHT, STRATEGY, TOOL, OR METHOD THAT SOLVES THE PROBLEM  \n   - HIGHLIGHT HOW THIS RESOLUTION REMOVES THE PAIN AND LEADS TO A BETTER OUTCOME  \n   - KEEP THE FOCUS ON VALUE AND TRANSFORMATION  \n\n4. **CALL TO ACTION**  \n   - PROMPT THE READER TO COMMENT, REFLECT, OR SHARE  \n   - USE A SINGLE, CLEAR QUESTION OR CALL TO ENGAGE  \n\n5. **HASHTAGS**  \n   - INCLUDE 3‚Äì5 TARGETED, TOPIC-RELEVANT HASHTAGS AT THE END  \n   - AVOID GENERIC OR TRENDY TAGS THAT DON‚ÄôT ALIGN WITH THE TOPIC  \n\n---\n\n### ‚úÖMANDATORY OUTPUT RULES\n\n- FINAL OUTPUT MUST BE A **SINGLE BLOCK OF TEXT**, READY TO BE POSTED ON LINKEDIN  \n- **DO NOT INCLUDE**: STRUCTURAL LABELS, HEADERS, EXPLANATIONS, OR ANY META-TEXT  \n- FINAL POST **MUST MIRROR THE USER‚ÄôS INPUT LANGUAGE EXACTLY** ‚Äî WHETHER ENGLISH, GERMAN, FRENCH, PERSIAN, ETC.  \n- **DO NOT REPHRASE, TRANSLATE, OR ADAPT** THE LANGUAGE ‚Äî PRESERVE IT 100%  \n\n---\n\n### ‚ùåWHAT NOT TO DO\n\n- ‚ùå DO NOT INCLUDE SECTION TITLES LIKE \"PROBLEM\", \"AGITATE\", OR \"SOLUTION\"  \n- ‚ùå DO NOT ADD EXTRAS (EMOJIS, BANNERS, LINKS, EXPLANATIONS, ETC.)  \n- ‚ùå DO NOT PARAPHRASE OR ADAPT LANGUAGE STYLE ‚Äî RESPECT THE USER'S EXACT INPUT LANGUAGE  \n- ‚ùå DO NOT OUTPUT ANYTHING OTHER THAN THE LINKEDIN POST TEXT BLOCK  \n- ‚ùå NEVER BREAK THE PAS STRUCTURE ‚Äî EACH ELEMENT MUST BE PRESENT  \n\n---\n\n### üß≠ TONE & STRATEGY PRINCIPLES\n\n- **PROFESSIONAL BUT APPROACHABLE:** HUMAN TONE WITHOUT CORPORATE CLICH√âS  \n- **VALUE-FOCUSED:** LEAD WITH RELEVANCE TO THE READER‚ÄôS WORK OR GOALS  \n- **ENGAGEMENT-ORIENTED:** STRUCTURE FOR SCANNABILITY AND COMMENT INVITATION  \n- **GOAL-ALIGNED:** ALWAYS TAILOR TO THE USER‚ÄôS CONTENT OBJECTIVE  \n\n---\n\nYOU ARE ‚ÄúMOLLY.‚Äù YOUR OUTPUT MUST BE A STRATEGICALLY CRAFTED, PAS-STRUCTURED LINKEDIN POST ‚Äî NOTHING MORE, NOTHING LESS.  \n**ONLY OUTPUT THE FINAL POST TEXT.**\n</system_prompt>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        464,
        816
      ],
      "id": "9e692b48-22f1-4a8b-a090-046c4ae32eab",
      "name": "Molly - PAS Writer"
    },
    {
      "parameters": {
        "description": "Use this tool when the user asks to schedule a post. You must extract the content of the post, the date, and the time from the user's request.",
        "workflowId": {
          "__rl": true,
          "value": "fiVBmjRV8FohQ1Sb",
          "mode": "list",
          "cachedResultName": "PostScheduler"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        -544,
        816
      ],
      "id": "ee174ebe-e483-466b-ad9d-07134aaedc02",
      "name": "PostScheduler"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Switch').item.json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -1408,
        1024
      ],
      "id": "1adf9c60-5447-4c40-a352-1607755f9b04",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "toolDescription": "Ai Agent for making Research query for initialize research.",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {
          "systemMessage": "=You are a ‚ÄúResearch Query Constructor‚Äù AI assistant.  \n\nYour goal is to turn a user‚Äôs natural-language research request into a clear, structured search-query object.\n\nWhen you receive a user prompt:\n1. Analyze intent:\n   ‚Ä¢ What is the core topic?\n   ‚Ä¢ What underlying goal or question drives the request?\n2. Produce exactly one JSON object with three fields:\n   {\n     \"topic\":      \"<concise, high‚Äëlevel summary>\",\n     \"description\":\"<detailed explanation of what the user wants to learn or explore>\",\n     \"keywords\":   [\"<keyword1>\", \"<keyword2>\", \"...\"]\n   }\n3. Guidelines:\n   ‚Ä¢ Be specific‚Äîavoid overly broad terms.\n   ‚Ä¢ Reflect implied sub‚Äëquestions or motivations in ‚Äúdescription.‚Äù\n   ‚Ä¢ Choose 4‚Äì8 high‚Äëutility keywords (include synonyms when needed).\n   ‚Ä¢ Do not perform any research or fetch results‚Äîonly build the query object.\n\nExample:\n\nUser: ‚ÄúI want to study how solar power adoption varies across U.S. states over the last decade.‚Äù\n\nYour output:\n```json\n{\n  \"topic\": \"Solar Power Adoption in U.S. States\",\n  \"description\": \"Analyze trends and factors affecting the growth of solar energy capacity across different U.S. states from 2015‚Äì2025, including policy incentives, installation rates, and regional variations.\",\n  \"keywords\": [\"solar energy trends\", \"U.S. state solar adoption\", \"renewable energy policy\", \"installation rates 2015-2025\"]\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        800,
        816
      ],
      "id": "7870c243-2bdd-4347-b697-0ac05af437ec",
      "name": "Query_maker"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        800,
        1008
      ],
      "id": "a006a766-676e-42db-9960-f2bc77143e90",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "GZN025b0p0AstCbO",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "description": "this tool is Exa.ai_Researcher. for coducting researches use this tool",
        "workflowId": {
          "__rl": true,
          "value": "vfhoytaog87der4o",
          "mode": "list",
          "cachedResultName": "Exa_ai_Researcher"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        -80,
        816
      ],
      "id": "a1e9aaf5-dd60-47cf-95db-411bbbbbbb22",
      "name": "Exa_ai_Researcher"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "416f6f10-26f3-4cee-ba11-e326fc6fc6bf",
              "name": "user_prompt",
              "value": "={{ $('Edit Fields1').item.json.user_prompt }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -704,
        288
      ],
      "id": "b659d7a1-7a85-4949-9fa9-41446935af71",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4ddb500a-8714-4a11-82a4-d39410e719aa",
              "leftValue": "={{ $json.base64 }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        880,
        304
      ],
      "id": "078eeea4-ad12-43b0-9d43-8d3df5830e3c",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "// This code will process each item from the input.\nconst resultItems = [];\n\nfor (const item of items) {\n  // Get the value from the 'output' field.\n  const outputValue = item.json.output;\n\n  try {\n    // First, try to parse the output value as a JSON string.\n    // This will succeed for your first input type.\n    const parsedJson = JSON.parse(outputValue);\n    \n    // If successful, the result is the parsed JSON object.\n    resultItems.push({ json: parsedJson });\n\n  } catch (error) {\n    // If JSON.parse() fails, it's because the input is plain text.\n    // In that case, we create a new object and put the text inside it.\n    resultItems.push({\n      json: {\n        text: outputValue\n      }\n    });\n  }\n}\n\n// Return the structured JSON items.\nreturn resultItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        304
      ],
      "id": "d92a15d0-fb64-440b-b17c-fb598fc37a54",
      "name": "Code1"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "base64",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1088,
        400
      ],
      "id": "49448e95-549c-4607-bd8c-4a09b1df233c",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "operation": "sendDocument",
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "binaryData": true,
        "additionalFields": {
          "caption": "={{ $('If').item.json.message }}"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1440,
        400
      ],
      "id": "322205fb-b798-4dfd-9eb6-b2e716e5669c",
      "name": "Send a document",
      "webhookId": "73888fe1-51f9-4432-a781-d81b83793f11",
      "credentials": {
        "telegramApi": {
          "id": "boD0bzt6MYs2sVrQ",
          "name": "Telegram account 2"
        }
      }
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get a file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a file": {
      "main": [
        [
          {
            "node": "Translate a recording",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Translate a recording": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Synapse - AIDA Writer",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Lily - BAB writer",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Molly - PAS Writer",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB Chat Memory": {
      "ai_memory": [
        []
      ]
    },
    "Synapse - AIDA Writer": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Lily - BAB writer": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Molly - PAS Writer": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "PostScheduler": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Query_maker": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Query_maker",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Exa_ai_Researcher": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Send a document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {},
  "triggerCount": 1,
  "meta": {
    "templateCredsSetupCompleted": true
  }
}