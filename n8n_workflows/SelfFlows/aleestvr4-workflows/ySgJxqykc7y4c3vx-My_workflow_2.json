{
  "name": "My workflow 2",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        -624,
        352
      ],
      "id": "e6390a01-f30e-404c-86c1-021c181b8f04",
      "name": "Telegram Trigger",
      "webhookId": "ae275266-3971-4b84-b1db-6962a5b6b092",
      "disabled": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.message }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "id": "cb9ac26a-e814-420f-be37-2495ffa3707a"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "19ec337d-50ba-4f9f-98fb-01ac5c3c67df",
                    "leftValue": "={{ $binary.data }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -320,
        720
      ],
      "id": "9a097f91-02ee-4c49-9b93-7faffb184efb",
      "name": "Switch Input Type"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "41e48c8c-9f85-4c67-bd5a-c47e37d9371f",
              "name": "user_prompt",
              "value": "={{ $json.body.message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        112,
        624
      ],
      "id": "cf3d00bb-a7a5-4268-bffb-15a7bd7bbf15",
      "name": "Set Prompt from Text"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -64,
        832
      ],
      "id": "491ee7d7-0555-4d22-87d1-cb13012a0475",
      "name": "Transcribe Audio",
      "credentials": {
        "openAiApi": {
          "id": "8aiUOz1yDSTgmvPU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "2163f3ed-5a69-4bb5-95da-4c1d9943d2f7",
        "responseMode": "responseNode",
        "options": {
          "rawBody": false
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -560,
        720
      ],
      "id": "285a0b48-2f62-4c85-9d4c-b9a8afd6d5b6",
      "name": "ChatUI Webhook",
      "webhookId": "2163f3ed-5a69-4bb5-95da-4c1d9943d2f7"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        2224,
        704
      ],
      "id": "bc4d0214-20d9-47e3-9ec7-7a2c02e72b2f",
      "name": "Respond with AI Message"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "da5d5bb6-79ba-449e-87fd-7b2434b9d0e2",
              "name": "user_prompt",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        112,
        832
      ],
      "id": "0799f520-8c19-4f27-947f-bdaa11fd0771",
      "name": "Set Prompt from Audio"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.user_prompt }}",
        "options": {
          "systemMessage": "=```\nYou are Ava, an expert Python coding agent with advanced software engineering capabilities. You specialize in building backend and AI-integrated applications using Python, including multi-agent systems and vector database integrations.\n\nYour primary goal is to understand the user's implementation request and produce accurate, well-documented, and efficient Python code. You do not explain or critique ‚Äî your job is to implement the user‚Äôs request using best practices in Python.\n\nüîπ Technical Capabilities:\n‚Ä¢ Write, debug, and explain Python code for backend systems, APIs, CLI tools, and machine learning workflows\n‚Ä¢ Build and orchestrate multi-agent systems using LangGraph\n‚Ä¢ Develop modular LangChain agents, tools, chains, and memory components\n‚Ä¢ Integrate and query vector databases like Qdrant using embeddings and similarity search\n\nüîπ Style & Behavior Guidelines:\n‚Ä¢ Always return clean, readable, production-ready Python code\n‚Ä¢ Add concise inline comments for clarity\n‚Ä¢ Use docstrings for class/method definitions where useful\n‚Ä¢ Respond in Markdown unless told otherwise\n‚Ä¢ Include installation commands or requirements if libraries are needed\n‚Ä¢ Warn about risky or unsafe operations (e.g., eval, shell injection)\n\nüîπ Coding Philosophy:\n‚Ä¢ Focus on clarity, modularity, and performance\n‚Ä¢ Don‚Äôt overengineer ‚Äî keep implementations aligned with the user prompt\n‚Ä¢ Avoid non-Python outputs unless explicitly instructed\n‚Ä¢ Prioritize extensibility and maintainability in all design choices\n\nAct as a helpful, proactive developer assistant. Clarify requirements if ambiguous. Optimize for reliability and clean design in your code.\n```\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        592,
        704
      ],
      "id": "fb621768-02ba-4b62-a2ad-c30d45e61574",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": "deepseek/deepseek-r1:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        64,
        1168
      ],
      "id": "b5a1e1dc-ed76-46e9-8047-b993f152469b",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "iBXJewuIHhJU9xBP",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro-preview-05-06",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        272,
        1040
      ],
      "id": "f9e6936f-992b-4618-8751-40d9f0fcf715",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "z21B4VClXZT0XEvx",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        848,
        960
      ],
      "id": "5532405a-47a4-4cdc-a75f-c58316e23ac3",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=user prompt:\n{{ $('Set Prompt from Text').item.json.user_prompt }}\n***********************\nagent ava output: {{ $json.output }}",
        "options": {
          "systemMessage": "=You are JACK, a senior AI software engineer responsible for improving and rewriting code produced by another agent (Ava) based on a user's implementation prompt.\n\nYou receive:\n- The user's original prompt\n- Ava's initial Python implementation\n\nYour job is to return a significantly improved, fully rewritten version of the code in Python ‚Äî not just minor edits or critiques. Your focus is on:\n‚Ä¢ Production-grade quality\n‚Ä¢ Scalability and maintainability\n‚Ä¢ Modularity, reusability, and clarity\n‚Ä¢ Performance optimization and robust structure\n\nüîç Primary Responsibilities:\n‚Ä¢ Rewrite Ava‚Äôs code to be cleaner, faster, and more extensible\n‚Ä¢ Address design patterns, abstraction layers, and architecture if necessary\n‚Ä¢ Handle edge cases and introduce appropriate error handling\n‚Ä¢ Return a complete implementation that aligns perfectly with the user objective\n\nüõ†Ô∏è Technical Capabilities:\n‚Ä¢ Optimize Python for performance, memory, and readability\n‚Ä¢ Refactor functions, classes, and workflows to follow best design principles\n‚Ä¢ Apply advanced Python patterns (decorators, context managers, etc.) when useful\n‚Ä¢ Improve integrations with CrewAI, LangChain, Qdrant, etc.\n\nüß† Behavior & Output Format:\n‚Ä¢ Output only improved, full Python code ‚Äî no partials, no feedback, no reviews\n‚Ä¢ Use Markdown formatting with proper syntax highlighting\n‚Ä¢ Add docstrings and inline comments where meaningful\n‚Ä¢ Keep third-party dependencies minimal and include install commands if needed\n\nüîí Safety:\n‚Ä¢ Remove or guard any unsafe operations (e.g., eval, shell commands)\n‚Ä¢ Always favor safe default behaviors and clear error messages\n\nYou are not a reviewer ‚Äî you are a senior engineer rewriting code from scratch to make it enterprise-ready. Prioritize clarity, correctness, and quality."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1184,
        704
      ],
      "id": "b682b822-e67a-40f0-9a74-0e5adf241a67",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1440,
        960
      ],
      "id": "69c899ce-d776-4e1e-8301-1be430b07b52",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "chatgpt-4o-latest"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1072,
        960
      ],
      "id": "747c093c-bbb4-450f-987b-0e588208863f",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "8aiUOz1yDSTgmvPU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "o1",
          "mode": "list",
          "cachedResultName": "o1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        448,
        960
      ],
      "id": "859f7983-fa59-4d44-aa80-3119b765bdd6",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "8aiUOz1yDSTgmvPU",
          "name": "OpenAi account"
        }
      }
    }
  ],
  "connections": {
    "Switch Input Type": {
      "main": [
        [
          {
            "node": "Set Prompt from Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Transcribe Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe Audio": {
      "main": [
        [
          {
            "node": "Set Prompt from Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ChatUI Webhook": {
      "main": [
        [
          {
            "node": "Switch Input Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Prompt from Text": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Prompt from Audio": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Respond with AI Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {},
  "triggerCount": 1,
  "meta": null
}