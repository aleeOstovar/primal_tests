{
  "name": "Mighty Agent",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        -560,
        100
      ],
      "id": "a74e4275-8da5-41e4-99f4-11c62bc0398b",
      "name": "Telegram Trigger",
      "webhookId": "ae275266-3971-4b84-b1db-6962a5b6b092",
      "credentials": {
        "telegramApi": {
          "id": "orYxDQVOrKBN8m3y",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "19ec337d-50ba-4f9f-98fb-01ac5c3c67df",
                    "leftValue": "={{ $json.message.voice.file_id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -380,
        100
      ],
      "id": "c0741ed4-a885-4dd6-a787-2b18fcc4644f",
      "name": "Switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "41e48c8c-9f85-4c67-bd5a-c47e37d9371f",
              "name": "text",
              "value": "={{ $json.message.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -40,
        0
      ],
      "id": "20ac62b4-fa80-4940-9144-cc9d80fb6486",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.voice.file_id }}"
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -140,
        180
      ],
      "id": "e2d8b102-cbbb-436c-a702-0ba9ff7bfbd9",
      "name": "Telegram",
      "webhookId": "026d1f72-b50f-40f3-9b4f-29dd1eab831f",
      "credentials": {
        "telegramApi": {
          "id": "orYxDQVOrKBN8m3y",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        40,
        180
      ],
      "id": "dd6306c8-b969-41a5-acc5-7341f113e7bc",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "CWJYp93mxQT3xD4V",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}",
        "options": {
          "systemMessage": "you are \"Capitali Bot\" developed and Created by AI team in Capitalino. a financial assistant equipped with tools to fetch cryptocurrency prices and provide technical analysis. \n\nWhen a user requests the price of a specific cryptocurrency, construct the CoinMarketCap API URL using the template: `https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?symbol={symbol}`. Replace the `{symbol}` placeholder with the symbol provided by the user to fetch the correct data.\n\nWhen discussing technical analysis related to stocks or cryptocurrencies, pass a standard prompt to the Technical_analysis tool, where a specialized agent can assist with the analysis.\n\n# Steps\n\n1. **Cryptocurrency Price Fetching:**\n   - Identify the user's request for a cryptocurrency price.\n   - Use the provided cryptocurrency symbol to construct the API URL.\n   - Fetch cryptocurrency prices using the CoinMarketCap API.\n\n2. **Technical Analysis Discussion:**\n   - Recognize requests for technical analysis on stocks or cryptocurrencies.\n   - Prepare a standard prompt to pass to the Technical_analysis tool.\n\n# Output Format\n\n- For cryptocurrency prices: Provide the current price in USD with additional information if available (like price changes in past 24h or market rank).\n- For technical analysis requests: Confirm receipt, present an smooth key elements of the analysis if applicable.\n\n# Examples\n\n**Example 1: Cryptocurrency Price Request**\n\n- *User Input:* \"What is the price of BTC?\"\n  \n- *Process:* \n  - Identify 'BTC' as the symbol.\n  - Construct the API URL: `https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?symbol=BTC`\n  - Fetch and provide the current price of BTC in USD.\n\n**Example 2: Technical Analysis Request**\n\n- *User Input:* \"Can you perform a technical analysis on ETH?\"\n  \n- *Process:*\n  - Recognize the request for technical analysis on 'ETH'.\n  - Pass a standard prompt to the Technical_analysis tool.\n  - Summarize the analysis received from the tool.\n\n# Notes\n\n- Always confirm which cryptocurrency or stock the user is inquiring about before proceeding.\n- The CoinMarketCap API URL should always be checked for accuracy with the user's input.\n- Ensure the standard prompt for technical analysis is engaging and clear for the specialized agent to deliver effective results.\n- your response to user must be in the same language user talked to you.\n- never mention  or add external links or urls except www.capitalino.io.\n- if user asked about analysis at the end of your response always invite them to visit WWW.capitalino.io for more consults and professional advices"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        420,
        100
      ],
      "id": "15bc14ce-81ed-4a1d-95c0-7d9958d7c75e",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "chatId": "={{ $('Switch').item.json.message.chat.id }}\n",
        "text": "={{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        960,
        100
      ],
      "id": "1ea4b3ef-a8ea-49ad-9583-b8746e7d8fae",
      "name": "Telegram1",
      "webhookId": "c1252f4e-55a7-43a8-9fb2-d305ab4a8947",
      "credentials": {
        "telegramApi": {
          "id": "orYxDQVOrKBN8m3y",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        0,
        480
      ],
      "id": "2af7c3ff-53f4-466a-bb72-720700e9e3a0",
      "name": "Brain",
      "credentials": {
        "openAiApi": {
          "id": "CWJYp93mxQT3xD4V",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        120,
        480
      ],
      "id": "e623a302-7471-425b-b780-13111117535f",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "name": "GetPrice_Agent",
        "description": "this agent is used for getting prices of Stable Currencies, Stocks, Crypto Currencies, and Forex Indicies",
        "workflowId": {
          "__rl": true,
          "value": "9E1iYKKBvdgtWF6A",
          "mode": "list",
          "cachedResultName": "GetPrice_Agent"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        400,
        480
      ],
      "id": "dcd9048a-37d1-4852-a740-dd0b4b3a599b",
      "name": "GetPrice Agent"
    },
    {
      "parameters": {
        "name": "TA_Agent",
        "description": "this agent will analyse stock, crypto or forex chats, and will provide chart images, candlestick patterns, technical analysis report, price-action Strategy",
        "workflowId": {
          "__rl": true,
          "value": "Pd9fytKVgNC7uvvF",
          "mode": "list",
          "cachedResultName": "TA_Agent"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        580,
        480
      ],
      "id": "daa87113-a3e0-48f8-9914-0a6061a1c71e",
      "name": "TA Agent"
    },
    {
      "parameters": {
        "name": "Fundamental_Agent",
        "description": "this agent will provide fundamental or on-chain analysis",
        "workflowId": {
          "__rl": true,
          "value": "hFet7c9BRHllR1IL",
          "mode": "list",
          "cachedResultName": "Fundamental_Agent"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        760,
        480
      ],
      "id": "4bd9de2a-197e-42c7-88a1-37ccc22b7307",
      "name": "Fundamental_Agent"
    },
    {
      "parameters": {
        "content": "",
        "height": 240,
        "width": 340,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -60,
        400
      ],
      "id": "1d70b4dd-e206-4331-a10b-17772df32f47",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "name": "PricePrediction_Agent",
        "description": "this agent is used for predicting prices using LSTM or GRU",
        "workflowId": {
          "__rl": true,
          "value": "cZWw9xD1Wvx2X70E",
          "mode": "list",
          "cachedResultName": "My Sub-Workflow 1"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        940,
        480
      ],
      "id": "49c6e0d2-d5c5-4696-b61a-87fa64dc01d3",
      "name": "PricePrediction_Agent"
    },
    {
      "parameters": {
        "name": "FinancialReport_Agent",
        "description": "this agent is used for generating financial reports of user",
        "workflowId": {
          "__rl": true,
          "value": "NG5LW3vG45mobFsu",
          "mode": "list",
          "cachedResultName": "My Sub-Workflow 1"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        1120,
        480
      ],
      "id": "d4713814-3fc7-4a31-9caf-fbb9d6afbcd8",
      "name": "FinancialReport_Agent"
    },
    {
      "parameters": {
        "name": "FAQ_Agent",
        "description": "call this tool for getting general information about CapitaliNo or user's FAQ",
        "workflowId": {
          "__rl": true,
          "value": "obTHteDyyJcnR7p0",
          "mode": "list",
          "cachedResultName": "FAQ_Agent"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        1320,
        480
      ],
      "id": "ff859163-4d59-4196-9235-e0822f9018f2",
      "name": "FAQ_Agent"
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Telegram1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Brain": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "GetPrice Agent": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "TA Agent": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Fundamental_Agent": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "PricePrediction_Agent": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "FinancialReport_Agent": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "FAQ_Agent": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {},
  "triggerCount": 0,
  "meta": {
    "templateCredsSetupCompleted": true
  }
}