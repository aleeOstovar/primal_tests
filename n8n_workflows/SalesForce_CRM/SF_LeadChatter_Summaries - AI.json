{
  "name": "SF_LeadChatter_Summaries - AI",
  "nodes": [
    {
      "parameters": {
        "content": "## SF Leads AI Summary\n\nThis automation will get all transcripts from one contact based on its name since dialpad contact IDs seem to not be unique. Once done it will summarise all calls and insert into SF leads page.",
        "height": 360,
        "width": 340,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3344,
        2160
      ],
      "id": "1b9a22e5-bdf4-4417-8e37-6cb3bebc96dc",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Live SF Chatter",
        "height": 240,
        "width": 220,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1408,
        1104
      ],
      "typeVersion": 1,
      "id": "4646967a-61df-4079-9e8a-a3008257da32",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nfor (const item of items) {\n  const leadId = item.json.lead_ID;\n\n  if (leadId && (leadId.startsWith('00Q') || leadId.startsWith('006'))) {\n    item.json.valid_Lead_ID = true;\n  } else {\n    item.json.valid_Lead_ID = false;\n  }\n\n  if (leadId && leadId.startsWith('00Q')) {\n    item.json.SourceType = 'Lead';\n  }\n  else if (leadId && leadId.startsWith('006')) {\n    item.json.SourceType = 'Opportunity';\n  }\n}\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1520,
        1728
      ],
      "id": "20b8a5b5-b8a0-4025-b646-1b5a23db22da",
      "name": "Code9"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.SourceType }}",
                    "rightValue": "Opportunity",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "8b654bee-63d5-43aa-9113-e290921ef2b0"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Opportunity"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b4111d2d-079a-4a06-92bf-a80f3cfaea1b",
                    "leftValue": "={{ $json.SourceType }}",
                    "rightValue": "Lead",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Lead"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -592,
        1616
      ],
      "id": "98d5bcf3-6d6d-42b0-bbd4-cbbb19287294",
      "name": "Switch"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d1f4b902-ce69-45f0-aadc-82bf55976216",
              "leftValue": "={{ $json.Id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        160,
        1456
      ],
      "id": "825c5654-f00a-4c5c-8559-78f0a1718b35",
      "name": "If7"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d1f4b902-ce69-45f0-aadc-82bf55976216",
              "leftValue": "={{ $json.Id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        384,
        1744
      ],
      "id": "9fdfa930-9374-48ac-91de-218393d26368",
      "name": "If8"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a summarization assistant for Express Homebuyers (EHB).\n\nYour task is to read a collection of call transcripts between EHB agents and a customer/lead. The input includes:\n\t•\tThe customer/lead’s name\n\t•\tThe list of EHB agent names who have spoken with this customer\n\t•\tA series of call transcripts containing:\n\t•\tTimestamps/dates\n\t•\tSpeaker names\n\t•\tVerbatim call content\n\t•\tAddress of the property being talked about\n\t•\tNotes left by EHB Agent\n\n\n⸻\n\nYour output should:\n\t•\tBe a clear, well-written summary of all conversations the customer has had with EHB agents\n\t•\tBe between 3 to 5 sentences long\n\t•\tInclude:\n\t•\tThe dates of the calls (e.g., “On June 26, 2025…”)\n\t•\tWhich agent said what, when applicable\n\t•\tDetails included like why customer is selling and mortgage balance and asking prices are important and should be in the summary.\n\t•\tInclude property updates, tenant status, rental income, and seller motivation (e.g., convenience, portfolio strategy) when summarizing lead conversations involving multiple rentals. Highlight condition, lease terms, and sale preferences.\n\t•\tAny missed calls, messages left should be mentioned, the last call action and summary is very important and should be placed at the end of summary.\n\t•\tWhat the customer communicated or asked\n\t•\tAny notable decisions, agreements, or sentiments exchanged, specially any prices, numbers, offeres that was mentioned over the call should always be in the summary.\n\t•\tUse Property inputed address as correct address. In case user is not providing address take it from the transcripts.\n\t•\tUse notes left by EHB agents as important source for your summary.\n\n\nImportant:\n\t•\tNo information should be lost.\n\t•\tBe neutral, concise, and preserve all essential conversation content.\n\t•\tOnly return plain text in summaries—do not include \\n, line breaks, or newline characters in the output.\n\t•\tIf the customer interacted with multiple agents, summarize each agent’s contributions separately, in chronological order. Mention customer tone as well.",
              "role": "system"
            },
            {
              "content": "=Customer/lead name:{{ $('Loop Over Items5').item.json.contact_name }}\nEHB agents names:\n{{ $('Loop Over Items5').item.json.agent_names }}\nTranscripts of calls:\n{{ $('Loop Over Items5').item.json.transcripts }}\nProperty Address:\n{{ $json.Company }}\nNotes from EHB Agents:\n{{ $json.Lead_Notes__c }}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        576,
        1632
      ],
      "id": "fbc4c183-b3c9-44b5-884d-f2dec55ee7e5",
      "name": "Message a model4",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "openAiApi": {
          "id": "obrCoVwP9hvbq5OW",
          "name": "EHB_App"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "leadId": "={{ $('Get Lead By Query').item.json.Id }}",
        "updateFields": {
          "description": "={{ $('Get Lead By Query').item.json.Lead_Notes__c }}\n\nAI Summary on {{ new Date().toLocaleString('en-US', { timeZone: 'America/New_York' }) }}:\n{{ $('Message a model4').item.json.message.content.summary }}"
        }
      },
      "type": "n8n-nodes-base.salesforce",
      "typeVersion": 1,
      "position": [
        928,
        1632
      ],
      "id": "a9769049-3eca-4487-acd1-f46dd71887b3",
      "name": "Update a lead2",
      "alwaysOutputData": true,
      "credentials": {
        "salesforceOAuth2Api": {
          "id": "CBdxVaEpIAhpORgk",
          "name": "Salesforce account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9d841cc7-eb74-4e4e-a0f3-eff7f6562d36",
              "name": "updated_entry_call_ids",
              "value": "={{ $('Loop Over Items5').item.json.call_ids }}",
              "type": "array"
            },
            {
              "id": "d3c8bc56-28f5-4b8c-be90-1c13d6f93d27",
              "name": "SF_Lead_AI_Summary",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "413ccc57-0919-4034-ba8b-e99743efe72c",
              "name": "is_sent_to_chatter",
              "value": false,
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2096,
        1664
      ],
      "id": "bae822d3-7312-422c-b589-f9cfe1a04eab",
      "name": "Edit Fields12"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9d841cc7-eb74-4e4e-a0f3-eff7f6562d36",
              "name": "updated_entry_call_ids",
              "value": "={{ $('Loop Over Items5').item.json.call_ids }}",
              "type": "array"
            },
            {
              "id": "d3c8bc56-28f5-4b8c-be90-1c13d6f93d27",
              "name": "SF_Lead_AI_Summary",
              "value": false,
              "type": "boolean"
            },
            {
              "id": "c3ae4c64-854e-4102-86dc-f401bde8503a",
              "name": "is_sent_to_chatter",
              "value": true,
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2048,
        1376
      ],
      "id": "5859b79e-2cfd-47c3-a129-ccffadf0ce75",
      "name": "Edit Fields13"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://expresshomebuyers.my.salesforce.com/services/data/v64.0/chatter/feed-elements",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "salesforceOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"body\": {\n    \"messageSegments\": [\n      {\n        \"type\": \"Text\",\n        \"text\": \"EHB AI Agent: {{$json.output}}\"\n      }\n    ]\n  },\n  \"feedElementType\": \"FeedItem\",\n  \"subjectId\": \"{{ $('Get Opportunity By Query').item.json.Id }}\"\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1824,
        1376
      ],
      "id": "2d0e17fb-82c1-40a2-907a-46598dc1a0f9",
      "name": "SF_Chatter_Oppt2",
      "credentials": {
        "salesforceOAuth2Api": {
          "id": "CBdxVaEpIAhpORgk",
          "name": "Salesforce account"
        }
      }
    },
    {
      "parameters": {
        "content": "# leadID 00Q\n# Opp ID 006\n\nwe can read SourceType from DB and use it directly in next Switch Node. This way we only control detection of sourceTypes from CallIDStore",
        "height": 300,
        "width": 460,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2128,
        1584
      ],
      "id": "fc89991b-c5df-4087-b860-c8701c2da89a",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1920,
        1808
      ],
      "id": "70f18c6e-c65a-4268-89ee-940d5a450680",
      "name": "Loop Over Items5",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "const allItems = items;\nconst groupedByName = {};\n\n// Flatten input and group by contact_name\nallItems.forEach(item => {\n  const dataArray = item.json.data || [];\n\n  dataArray.forEach(entry => {\n    const name = entry.contact_name || 'Unknown';\n    const lead_ID = entry.lead_ID;\n    const address = entry.address||\"unknown\";\n\n    if (!groupedByName[name]) {\n      groupedByName[name] = {\n        contact_name: name,\n        lead_ID: lead_ID,\n        address: address,\n        contact_ids: new Set(),\n        call_ids: [],\n        agent_ids: [],\n        agent_names: [],\n        call_datetimes: [],\n        transcripts: []\n      };\n    }\n\n    if (entry.contact_id) groupedByName[name].contact_ids.add(entry.contact_id);\n    if (entry.call_id) groupedByName[name].call_ids.push(entry.call_id);\n    if (entry.agent_id) groupedByName[name].agent_ids.push(entry.agent_id);\n    if (entry.agent_name) groupedByName[name].agent_names.push(entry.agent_name);\n    if (entry.call_datetime) groupedByName[name].call_datetimes.push(entry.call_datetime);\n    if (entry.transcript) groupedByName[name].transcripts.push(entry.transcript);\n  });\n});\n\n// Convert to array and Sets to arrays\nconst output = Object.values(groupedByName).map(group => ({\n  json: {\n    contact_name: group.contact_name,\n    lead_ID: group.lead_ID,\n    address: group.address,\n    contact_ids: Array.from(group.contact_ids),\n    call_ids: group.call_ids,\n    agent_ids: group.agent_ids,\n    agent_names: group.agent_names,\n    call_datetimes: group.call_datetimes,\n    transcripts: group.transcripts\n  }\n}));\n\nreturn output;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2128,
        1808
      ],
      "id": "1f4f816d-ffec-4dc8-afb3-8021578ff81d",
      "name": "Code10"
    },
    {
      "parameters": {
        "resource": "search",
        "query": "=SELECT Id, Name, StageName, CloseDate, AccountId, CreatedDate \nFROM Opportunity \nWHERE Id = '{{ $json.lead_ID }}'"
      },
      "type": "n8n-nodes-base.salesforce",
      "typeVersion": 1,
      "position": [
        -48,
        1456
      ],
      "id": "9c2a0f09-76f8-4bb3-97d9-c00394494733",
      "name": "Get Opportunity By Query",
      "alwaysOutputData": false,
      "credentials": {
        "salesforceOAuth2Api": {
          "id": "CBdxVaEpIAhpORgk",
          "name": "Salesforce account"
        }
      }
    },
    {
      "parameters": {
        "resource": "search",
        "query": "=SELECT Id, Company, FirstName, LastName, Street, City, PostalCode, Email, Status, ConvertedOpportunityId, CreatedDate, Lead_Notes__c \nFROM Lead \nWHERE Id = '{{ $json.lead_ID }}'"
      },
      "type": "n8n-nodes-base.salesforce",
      "typeVersion": 1,
      "position": [
        -128,
        1744
      ],
      "id": "66d9047a-2ebb-47af-a439-4912f17a433f",
      "name": "Get Lead By Query",
      "alwaysOutputData": false,
      "credentials": {
        "salesforceOAuth2Api": {
          "id": "CBdxVaEpIAhpORgk",
          "name": "Salesforce account"
        }
      }
    },
    {
      "parameters": {
        "amount": 20
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2944,
        1936
      ],
      "id": "f77048e8-39cc-4ad5-8b39-33bc23a2bce9",
      "name": "Wait4",
      "webhookId": "48cac579-81c6-4793-8e83-39e50cddc2a1"
    },
    {
      "parameters": {
        "jsCode": "const ids = $json.updated_entry_call_ids;\n\nreturn ids.map(id => ({\n  json: {\n    entry_point_call_id: id,\n    SF_Lead_AI_Summary: $json.SF_Lead_AI_Summary,\n    is_sent_to_chatter: $json.is_sent_to_chatter\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2272,
        1376
      ],
      "id": "494368ca-daab-4bb5-814b-d60503aea9d2",
      "name": "Code11"
    },
    {
      "parameters": {
        "operation": "update",
        "collection": "DialPad_Calls",
        "updateKey": "entry_point_call_id",
        "fields": "SF_Lead_AI_Summary,is_sent_to_chatter",
        "options": {}
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        2496,
        1376
      ],
      "id": "d0eb4796-bf5f-4570-8b27-ba52b79a198b",
      "name": "MongoDB13",
      "credentials": {
        "mongoDb": {
          "id": "D0wQGJq9PREKHRcJ",
          "name": "EHB"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -2352,
        2352
      ],
      "id": "b5fc490d-97c6-4d6b-9214-6cf99f7bc85d",
      "name": "Loop Over Items6",
      "executeOnce": false
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json\nconst entryPointCallIds = input.entry_point_call_id;\n// Create the MongoDB query object\nconst mongoQuery = {\n  call_id: { \"$in\": entryPointCallIds }\n};\n\n// Convert to JSON string for n8n MongoDB node\nreturn {\n  json: {\n    mongoQuery: JSON.stringify(mongoQuery),\n    contact_name: input.contact_name,\n    lead_ID: input.lead_ID,\n    address: input.address,\n    call_id: input.entry_point_call_id\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2176,
        2368
      ],
      "id": "6b99c891-27c4-4507-88d8-377a78f9c92d",
      "name": "Code8"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "48ee51c3-75c9-4f64-ac9a-d9fef5087030",
              "leftValue": "={{ $json.lead_ID }}",
              "rightValue": "=006Up00000EzpvCIAR",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -2640,
        2528
      ],
      "id": "a33273be-cd88-4092-b1c4-67a6c56ee62f",
      "name": "Filter2",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "aggregate",
        "collection": "DialPad_Calls",
        "query": "[\n  {\n    \"$match\": {\n      \"entry_point_call_id\": { \"$ne\": null },\n      \"lead_ID\": { \"$ne\": null }\n    }\n  },\n  {\n    \"$group\": {\n      \"_id\": {\n        \"contact_name\": \"$contact.name\",\n        \"lead_ID\": \"$lead_ID\"\n      },\n      \"contact_name\": { \"$first\": \"$contact.name\" },\n      \"phone\": { \"$first\": \"$contact.phone\" },\n      \"latest_event_timestamp\": { \"$max\": { \"$toLong\": \"$event_timestamp\" } },\n      \"max_duration\": { \"$max\": \"$duration\" },\n      \"entry_point_call_id_raw\": { \"$addToSet\": \"$entry_point_call_id\" },\n      \"has_unprocessed_call\": {\n        \"$max\": {\n          \"$cond\": [\n            {\n              \"$not\": {\n                \"$or\": [\n                  { \"$eq\": [\"$SF_Lead_AI_Summary\", true] },\n                  { \"$eq\": [\"$is_sent_to_chatter\", true] }\n                ]\n              }\n            },\n            true,\n            false\n          ]\n        }\n      }\n    }\n  },\n  {\n    \"$match\": {\n      \"has_unprocessed_call\": true\n    }\n  },\n  {\n    \"$addFields\": {\n      \"entry_point_call_id_clean\": {\n        \"$filter\": {\n          \"input\": \"$entry_point_call_id_raw\",\n          \"as\": \"id\",\n          \"cond\": { \"$ne\": [\"$$id\", null] }\n        }\n      }\n    }\n  },\n  {\n    \"$addFields\": {\n      \"is_first_call\": {\n        \"$eq\": [{ \"$size\": \"$entry_point_call_id_clean\" }, 1]\n      }\n    }\n  },\n  {\n    \"$match\": {\n      \"$expr\": {\n        \"$or\": [\n          {\n            \"$and\": [\n              { \"$eq\": [\"$is_first_call\", true] },\n              { \"$gt\": [\"$max_duration\", 180000] }\n            ]\n          },\n          { \"$eq\": [\"$is_first_call\", false] }\n        ]\n      }\n    }\n  },\n  {\n    \"$lookup\": {\n      \"from\": \"DialPad_Calls\",\n      \"let\": {\n        \"contactName\": \"$_id.contact_name\",\n        \"lead_ID\": \"$_id.lead_ID\"\n      },\n      \"pipeline\": [\n        {\n          \"$match\": {\n            \"$expr\": {\n              \"$and\": [\n                { \"$eq\": [\"$contact.name\", \"$$contactName\"] },\n                { \"$eq\": [\"$lead_ID\", \"$$lead_ID\"] },\n                { \"$ne\": [\"$entry_point_call_id\", null] }\n              ]\n            }\n          }\n        }\n      ],\n      \"as\": \"documents\"\n    }\n  },\n  {\n    \"$unwind\": \"$documents\"\n  },\n  {\n    \"$sort\": {\n      \"_id\": 1,\n      \"documents.event_timestamp\": -1\n    }\n  },\n  {\n    \"$group\": {\n      \"_id\": \"$_id\",\n      \"contact_name\": { \"$first\": \"$contact_name\" },\n      \"lead_ID\": { \"$first\": \"$_id.lead_ID\" },\n      \"phone\": { \"$first\": \"$phone\" },\n      \"latest_event_timestamp\": { \"$first\": \"$latest_event_timestamp\" },\n      \"contact_id\": { \"$addToSet\": \"$documents.contact.id\" },\n      \"call_id\": { \"$push\": \"$documents.call_id\" },\n      \"entry_point_call_id\": { \"$push\": \"$documents.entry_point_call_id\" },\n      \"address\": { \"$addToSet\": \"$documents.address\" }\n    }\n  },\n  {\n    \"$project\": {\n      \"_id\": 0,\n      \"contact_name\": 1,\n      \"lead_ID\": 1,\n      \"phone\": 1,\n      \"contact_id\": 1,\n      \"call_id\": 1,\n      \"entry_point_call_id\": 1,\n      \"address\": 1\n    }\n  },\n  {\n    \"$sort\": {\n      \"latest_event_timestamp\": 1\n    }\n  },\n  {\n    \"$limit\": 500\n  }\n]"
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        -3008,
        2384
      ],
      "id": "7844dcec-f039-48b8-9148-69bbc11a2dde",
      "name": "MongoDB14",
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "D0wQGJq9PREKHRcJ",
          "name": "EHB"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "83956d72-8aae-4a2f-bf09-5c35d2d0c2a8",
              "name": "contact_name",
              "value": "={{ $json.contact_name }}",
              "type": "string"
            },
            {
              "id": "098fa9d0-8f35-4b48-a1ea-7404b1fcd406",
              "name": "lead_ID",
              "value": "={{ $json.lead_ID }}",
              "type": "string"
            },
            {
              "id": "2cba22d9-9b91-4a68-a1c2-251d1b7d4f21",
              "name": "address",
              "value": "={{ $json.address }}",
              "type": "array"
            },
            {
              "id": "d0288f2d-5b5d-450f-b6ce-81e337ec20fe",
              "name": "call_id",
              "value": "={{ $json.call_id }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1920,
        2320
      ],
      "id": "c440f981-0f2d-4c2e-a84e-b05fb8c25a3b",
      "name": "Edit Fields14"
    },
    {
      "parameters": {
        "url": "=https://expresshomebuyers.my.salesforce.com/services/data/v64.0/chatter/feeds/record/{{ $json.Id }}/feed-elements",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "salesforceOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        544,
        1184
      ],
      "id": "870761aa-97ef-4c78-aca6-779c8f41f74d",
      "name": "SF_Chatter_Oppt",
      "credentials": {
        "salesforceOAuth2Api": {
          "id": "CBdxVaEpIAhpORgk",
          "name": "Salesforce account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let output = '';\n\nfor (const item of items) {\n  const feedElements = item.json.elements || [];\n\n  for (const el of feedElements) {\n    const segments = el.body?.messageSegments;\n    const user = el.actor?.displayName || 'Unknown User';\n    const datetime = el.createdDate || 'Unknown Time';\n\n    if (Array.isArray(segments) && segments.length > 0) {\n      const message = segments\n        .filter(seg => seg.type === 'Text' || seg.type === 'Mention')\n        .map(seg => seg.text)\n        .join(' ')\n        .trim();\n\n      if (message) {\n        output += `${user}\\n${datetime}\\n${message}\\n\\n`;\n      }\n    }\n  }\n}\n\nreturn [\n  {\n    json: {\n      aggregatedMessages: output.trim()\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        768,
        1184
      ],
      "id": "d9746092-0932-40db-9759-1404fbf0b125",
      "name": "Code"
    },
    {
      "parameters": {
        "content": "## Read SF Chatter",
        "height": 240,
        "width": 220,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        480,
        1104
      ],
      "typeVersion": 1,
      "id": "199b523a-824a-4e0d-90c2-50d353bafc2f",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 3
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -3200,
        2384
      ],
      "id": "48c2cb33-2299-4e4d-b28e-d955c3c567df",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "331626cc-0e10-4001-a512-acdeaee4986c",
              "leftValue": "={{ $json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2800,
        2384
      ],
      "id": "672ffa65-6013-498b-8958-25dbc87c1ac7",
      "name": "If"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e4847c63-4a9a-4697-ac53-6e3aa04f84e1",
              "leftValue": "={{ $json.Status }}",
              "rightValue": "Converted",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        64,
        1744
      ],
      "id": "cc1823eb-6202-4d57-bd49-c59f3515f766",
      "name": "If1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5ad779b3-3a8e-419e-8fe1-2a9c5e5cf5b8",
              "name": "entry_point_call_id",
              "value": "={{ $('Loop Over Items5').item.json.call_ids }}",
              "type": "string"
            },
            {
              "id": "321fd79a-7d4b-410f-a7c2-709059f11e28",
              "name": "got_converted",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "373462df-afab-4b7c-88f0-c1d2801a1d58",
              "name": "lead_ID",
              "value": "={{ $json.ConvertedOpportunityId }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        368,
        1936
      ],
      "id": "94f842d8-d076-4aa4-900b-bf2ced0b5fbe",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "update",
        "collection": "DialPad_Calls",
        "updateKey": "entry_point_call_id",
        "fields": "got_converted,lead_ID",
        "options": {}
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        992,
        1936
      ],
      "id": "07949fca-5a64-4f22-a956-76266ed30132",
      "name": "MongoDB15",
      "credentials": {
        "mongoDb": {
          "id": "D0wQGJq9PREKHRcJ",
          "name": "EHB"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "\nconst items = $input.all();\nconst newItems = [];\n\nfor (const item of items) {\n\n  const call_ids = JSON.parse(item.json.entry_point_call_id);\n  for (const call_id of call_ids) {\n    newItems.push({\n      json: {\n        entry_point_call_id: call_id,\n        got_converted: item.json.got_converted,\n        lead_ID: item.json.lead_ID\n      }\n    });\n  }\n}\n\n\nreturn newItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        672,
        1936
      ],
      "id": "3bdde8e8-3ec9-4216-9499-0a08dd202623",
      "name": "Code1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "chatgpt-4o-latest"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1008,
        1408
      ],
      "id": "3e84e07d-43f3-4624-ba60-f2f1faa81435",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "obrCoVwP9hvbq5OW",
          "name": "EHB_App"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-sonnet-4-20250514",
          "cachedResultName": "Claude 4 Sonnet"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        1152,
        1408
      ],
      "id": "56039cfd-f37a-4dfc-a51b-90a4c9714c20",
      "name": "Anthropic Chat Model",
      "credentials": {
        "anthropicApi": {
          "id": "K3pSSWYQqKj0wY5z",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Customer/lead name:{{ $('Loop Over Items5').item.json.contact_name }}\nEHB agents names:\n{{ $('Loop Over Items5').item.json.agent_names }}\nTranscripts of calls:\n{{ $('Loop Over Items5').item.json.transcripts }}\nProperty Address:\n{{ $('Get Opportunity By Query').item.json.Name }}\nNotes from EHB Agents:\n{{ $json.aggregatedMessages }}",
        "needsFallback": true,
        "options": {
          "systemMessage": "=You are a summarization assistant for Express Homebuyers (EHB). Read the provided input: the customer/lead’s name, the list of EHB agent names who interacted with the customer, address of the property (use property input address if present, otherwise extract from transcripts), a series of call transcripts (each including timestamp/date, speaker names, and verbatim call content), and previous notes left by EHB agents.\n\nYour task: write a clear, neutral, concise summary of all conversations between EHB agents and the customer. The summary must be 3–5 sentences in plain text (no line breaks). Follow these steps before presenting the conclusion:\n- Thoroughly review all transcripts and agent notes, focusing on capturing essential facts and sentiments exchanged.\n- Prioritize information from the most recent call(s)—structure the summary from latest to earliest (newest calls → oldest calls), paraphrasing conversation content with chronological clarity.\n- Highlight, when present: reasons for selling, mortgage balances, asking prices, property updates, condition, tenant status, rental income, and seller motivations (e.g., convenience, portfolio management), lease terms, sale preferences, any prices/numbers/offers mentioned.\n- Note any missed calls or messages left and indicate these actions; always mention the last call’s details and action as the conclusion, placing these at the end of the summary.\n- Attribute information to each agent by name, especially if multiple agents spoke with the customer; summarize each agent’s contributions in chronological order and include customer questions, decisions, agreements, and expressed sentiment or tone.\n- Use, but do not over-rely on, previous EHB agent notes: include up to 30% of relevant facts from notes, ensuring at least 70% of the summary is based on the latest call transcripts.\n- Avoid information loss—every notable fact from any source must be captured succinctly.\n- Do not include line breaks, listing, or formatting tags—output is a single paragraph in plain text.\n\n**Output format:** One well-written, chronological paragraph summary, 3–5 sentences in length, no line breaks or list formatting.\n\n**Example 1** (Longer summaries will typically require more detail and placeholder data):\nInput:\n- Customer: [Sarah James]\n- EHB Agents: [Alex Chen, Sam Patel]\n- Property Address: [123 Maple Drive]\n- Transcripts:\n  - August 2, 2025: Sam Patel calls Sarah, discusses asking price and tenant issues...\n  - July 12, 2025: Alex Chen speaks to Sarah about mortgage balance and selling motivation...\n  - July 3, 2025: Missed call from Sam Patel, message left...\n- Notes: Sam’s note from July 3 on missed call, Alex’s note on seller motivation.\nOutput:\nOn August 2, 2025, Sam Patel spoke with Sarah James regarding 123 Maple Drive, discussing her asking price of $400,000, concerns about late rent payments from current tenants, and her desire for a quick sale due to planned relocation. On July 12, 2025, Alex Chen confirmed with Sarah her mortgage balance of $250,000 and learned her primary motivation is reducing her landlord obligations. Earlier, on July 3, 2025, Sam Patel left Sarah a message after a missed call, summarizing EHB’s interest in the property. The last action taken was Sam’s call, which concluded with Sarah agreeing to consider a written offer; her tone during the conversation was businesslike and cautiously optimistic.\n\n**Example 2** (Real summaries should be of similar detail and length, reflecting the number of calls and content provided):\n[Insert second example as needed, using placeholders for agents, dates, prices, and property details.]\n\n**Special instructions and important considerations:**\n- Structure summaries from latest to earliest call, emphasizing recent transcripts.\n- Attribute agent contributions and highlight customer tone or sentiment.\n- Capture all prices, figures, and offers precisely; use notes only as a secondary source.\n- Finish with the last call action and state clearly if any missed calls/messages occurred.\n\n**REMINDER:** \n- Summarize all EHB-customer conversations, emphasizing latest transcripts, include all critical details, data, and agent actions, use concise chronological text, and produce a SINGLE continuous paragraph (3–5 sentences) without line breaks.\n- DO NOT USE DOUBLE QUOTATION MARK, ISTEAD USE SINGLE QUOTATION IF ITS NEEDED"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        1056,
        1184
      ],
      "id": "4b0115f8-a3a3-4434-9891-1ec5967f5dea",
      "name": "Chatter AI"
    },
    {
      "parameters": {
        "collection": "DialPad_Transcripts",
        "options": {},
        "query": "={{ $json.mongoQuery }}"
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        -1920,
        2512
      ],
      "id": "2df3ef19-cee0-4e23-90e0-8ff9a4435ecc",
      "name": "MongoDB7",
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "D0wQGJq9PREKHRcJ",
          "name": "EHB"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -1376,
        2480
      ],
      "id": "b41849be-7d91-44e2-84db-e1454026854e",
      "name": "Aggregate5"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -944,
        2560
      ],
      "id": "600fe2c9-2786-4e99-b947-8d01c2235a73",
      "name": "Wait5",
      "webhookId": "9f49718a-34e7-49b5-8b90-1c977b963f16",
      "disabled": true
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "contact_name",
        "joinMode": "enrichInput1",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1664,
        2480
      ],
      "id": "77e51de2-dd1d-4999-a2ea-1235996f18a8",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "const text = $input.first().json.output\nconst cleaned = text.replace(/[\\u200B-\\u200F\\u202A-\\u202E\\u2060\\u00A0]/g, \"\");\n\nreturn [{output: cleaned}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1456,
        1184
      ],
      "id": "273fe0ac-a975-4f0c-b103-457531e1ac47",
      "name": "Code2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "66b1f6b9-235b-458d-8310-41b17f391aae",
              "leftValue": "=valid_Lead_ID",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1312,
        1728
      ],
      "id": "472d12ef-5fb8-423f-aa3a-63953caaa960",
      "name": "If2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2544ac5c-2dec-4991-a6ff-0154eb80ee7d",
              "name": "contact_name",
              "value": "={{ $json.contact_name }}",
              "type": "string"
            },
            {
              "id": "2c2112db-5fe5-45f4-accc-d9e5d52d1f4f",
              "name": "entry_point_call_id",
              "value": "={{ $json.call_ids }}",
              "type": "string"
            },
            {
              "id": "7a955d1d-7e3c-4d95-a937-845453615c33",
              "name": "lead_ID",
              "value": "=",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1120,
        1824
      ],
      "id": "79f97b1d-242d-4f13-a186-be0693b32897",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "operation": "update",
        "collection": "DialPad_Calls",
        "updateKey": "entry_point_call_id",
        "fields": "=lead_ID",
        "options": {}
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        -672,
        1760
      ],
      "id": "3f4f1cff-8a71-4245-8878-0c050e6d3a9a",
      "name": "MongoDB16",
      "credentials": {
        "mongoDb": {
          "id": "D0wQGJq9PREKHRcJ",
          "name": "EHB"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "\nconst items = $input.all();\nconst newItems = [];\n\nfor (const item of items) {\n  const call_ids = JSON.parse(item.json.entry_point_call_id);\n  for (const call_id of call_ids) {\n    newItems.push({\n      json: {\n        entry_point_call_id: call_id,\n        lead_ID: item.json.lead_ID,\n        Datetime: Date.now(),\n        RecordID:JSON.stringify({\n          contact_name:item.json.contact_name,\n          lead_ID:item.json.lead_ID,\n          entry_point_call_id: call_id\n        }),\n        Error:\"malform Lead ID \"\n      }\n    });\n  }\n}\n\n\nreturn newItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -880,
        1824
      ],
      "id": "516d8fb7-528c-47a2-bc17-36f1ad86d4ff",
      "name": "Code3"
    },
    {
      "parameters": {
        "resource": "worksheet",
        "operation": "append",
        "workbook": {
          "__rl": true,
          "value": "01WL6XH3QY7X7RQ24HCZH3HSF3INEIRL4X",
          "mode": "list",
          "cachedResultName": "SF_Chatter_Exceptions",
          "cachedResultUrl": "https://mooregroup-my.sharepoint.com/personal/sadegh_expresshomebuyers_com/_layouts/15/Doc.aspx?sourcedoc=%7B18FFFD18-876B-4F16-B3C8-BB434888AF97%7D&file=SF_Chatter_Exceptions.xlsx&action=default&mobileredirect=true&DefaultItemOpen=1"
        },
        "worksheet": {
          "__rl": true,
          "value": "{00000000-0001-0000-0000-000000000000}",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://mooregroup-my.sharepoint.com/personal/sadegh_expresshomebuyers_com/_layouts/15/Doc.aspx?sourcedoc=%7B18FFFD18-876B-4F16-B3C8-BB434888AF97%7D&file=SF_Chatter_Exceptions.xlsx&action=default&mobileredirect=true&DefaultItemOpen=1&activeCell=Sheet1!A1"
        },
        "fieldsUi": {
          "values": [
            {
              "column": "Datetime",
              "fieldValue": "={{ $json.Datetime }}"
            },
            {
              "column": "Record ID",
              "fieldValue": "={{ $json.RecordID }}"
            },
            {
              "column": "Error",
              "fieldValue": "={{ $json.Error }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.microsoftExcel",
      "typeVersion": 2.1,
      "position": [
        -672,
        1968
      ],
      "id": "82034efd-6e23-42ed-87dc-a8762de474e4",
      "name": "Append data to sheet",
      "credentials": {
        "microsoftExcelOAuth2Api": {
          "id": "motDY0R3ZIESHXTG",
          "name": "Microsoft Excel account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -224,
        1936
      ],
      "id": "aab1fa88-8141-4f94-a20d-e13abe29b038",
      "name": "No Operation, do nothing"
    }
  ],
  "pinData": {},
  "connections": {
    "Code9": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Get Opportunity By Query",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Lead By Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If7": {
      "main": [
        [
          {
            "node": "SF_Chatter_Oppt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If8": {
      "main": [
        [
          {
            "node": "Message a model4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model4": {
      "main": [
        [
          {
            "node": "Update a lead2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update a lead2": {
      "main": [
        [
          {
            "node": "Edit Fields12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields12": {
      "main": [
        [
          {
            "node": "Code11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields13": {
      "main": [
        [
          {
            "node": "Code11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SF_Chatter_Oppt2": {
      "main": [
        [
          {
            "node": "Edit Fields13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items5": {
      "main": [
        [],
        [
          {
            "node": "Code9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code10": {
      "main": [
        [
          {
            "node": "Loop Over Items5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Opportunity By Query": {
      "main": [
        [
          {
            "node": "If7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Lead By Query": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait4": {
      "main": [
        [
          {
            "node": "Loop Over Items5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code11": {
      "main": [
        [
          {
            "node": "MongoDB13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB13": {
      "main": [
        [
          {
            "node": "Wait4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items6": {
      "main": [
        [
          {
            "node": "Code10",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code8": {
      "main": [
        [
          {
            "node": "Edit Fields14",
            "type": "main",
            "index": 0
          },
          {
            "node": "MongoDB7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter2": {
      "main": [
        []
      ]
    },
    "MongoDB14": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields14": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SF_Chatter_Oppt": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Chatter AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "MongoDB14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Loop Over Items6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "If8",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB15": {
      "main": [
        [
          {
            "node": "Loop Over Items5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "MongoDB15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Chatter AI",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Chatter AI",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Chatter AI": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB7": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Aggregate5": {
      "main": [
        [
          {
            "node": "Wait5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Aggregate5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait5": {
      "main": [
        [
          {
            "node": "Loop Over Items6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "SF_Chatter_Oppt2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "MongoDB16",
            "type": "main",
            "index": 0
          },
          {
            "node": "Append data to sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB16": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append data to sheet": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing": {
      "main": [
        [
          {
            "node": "Loop Over Items5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "86f39f1b-67bb-4760-b6ea-bb6280b80d48",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1492f4d88835c9aa4ef9f92114084d45e62f070cbfca1060935e9b804d7507de"
  },
  "id": "xzpiKCUNK3Fbvztx",
  "tags": []
}